{"hash": "561eafe2c8fc45f0ae196b2ec53fee7d438b69a2", "message": "Add `MessagePackSerializer.MaxAsyncBuffer` to speed up small async deserializations\n\nSince synchronous deserialization is substantially faster than async deserialization, we prefer sync. But sync requires that all msgpack data be pre-buffered. That's a reasonable trade-off, assuming the msgpack data is reasonably small. When it is large, the slower async path may be preferable to avoid unbounded memory consumption.\n\nCloses #155", "cs_files": ["MessagePackSerializer.cs", "AsyncSerializationTests.cs", "FragmentedPipeReader.cs", "MessagePackSerializerTestBase.cs"], "prev_hash": "7bb9a6c37c9cc09513b5e6c0a950e410dfb8d70e", "repo_url": "https://github.com/AArnott/Nerdbank.MessagePack", "repo_name": "AArnott/Nerdbank.MessagePack", "issue_id": "155", "instance_id": "aarnott_nerdbank.messagepack__155__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.aarnott_nerdbank.messagepack__155__9.0:msbench-0.0.3", "problem_statement": "As a major async perf optimization, buffer at least *n* bytes, and if EOF is encountered before reaching that threshold, just deserialize synchronously.\r\n\r\nAsync *during* deserialization is only useful for limiting memory consumption when the data to deserialize is quite large. When it is reasonably small, buffering it up front and then deserializing with the synchronous methods is much faster."}
{"hash": "03ac92e78a20824f66512fac7185e51c12bf3ea0", "message": "C# : Replaced \"foreach\" with \"for\" statements for performance (#35)\nC++: Minor update to demo app", "cs_files": ["Clipper.Engine.cs", "Clipper.Minkowski.cs", "Clipper.Offset.cs", "Clipper.cs"], "prev_hash": "68029e7287b579a14f043bcaacecb85f97d2c856", "repo_url": "https://github.com/AngusJohnson/Clipper2", "repo_name": "AngusJohnson/Clipper2", "issue_id": "35", "instance_id": "angusjohnson_clipper2__35__6.0", "dotnet_version": "net6.0", "image_tag": "perfbench.eval.x86_64.angusjohnson_clipper2__35__6.0:msbench-0.0.3", "problem_statement": "Hi Angus,\r\n\r\nReferring the the C-Sharp implementation, the last commit (fixed my reported other issue: THANKS!), however it also  introduced some regressions:\r\n- Clipper.Engine.cs, line 3535: call to this function leads to stack overflow due to endless recursive call (ClipperFunc.ScalePaths returns exactly the signature this functions needs, so it's called again)\r\n- Clipper.Engine.cs, line 3599: creates a new \"solutionClosed\" object, and the passed in solutionClosed object remains null, so result is empty\r\n- noticed you replaced come for-loops with foreach. Guess because code looks cleaner, but it also generates more garbage (GC collection could cause performance degradation). This might be irrelevant for what you aim for, but just FYI I made a port of the Clipper2Lib CSharp class to a struct to make it compatible with [Unity BURST](https://docs.unity3d.com/Packages/com.unity.burst@1.7/manual/index.html) (and [here a blog](https://blog.unity.com/technology/bursting-into-2021-with-burst-15)). SO I have to get rid of all managed code, foreach is among the incompatible stuff.  This class-->struct conversation and BURST compiler alone leads to a ~10x speedup. Adding in the Unity Job system I can saturate now any number of  worker thread clipping polygons in parallel (another 10x speadup)..so 50-100 times speedup. Will upload the Unity package + some class/struct performance comparison soon on GitHub in case you are interested. \r\n\r\n-Fribur\r\n"}
{"hash": "e04233f5cfe0068b0bb68232ba2e7973ff03a614", "message": "Fix StackOverflowException disposing InMemoryBroker [#67]", "cs_files": ["InMemoryBroker.cs", "KafkaMessageKeyBehavior.cs", "KafkaConsumer.cs", "InMemoryBrokerTests.cs", "TestBroker.cs", "TestConsumer.cs"], "prev_hash": "7e26af54e0ff0ed7285ec7703d4ceb3d5b2af8ad", "repo_url": "https://github.com/BEagle1984/silverback", "repo_name": "BEagle1984/silverback", "issue_id": "67", "instance_id": "beagle1984_silverback__67__5.0", "dotnet_version": "net5.0", "image_tag": "perfbench.eval.x86_64.beagle1984_silverback__67__5.0:msbench-0.0.3", "problem_statement": "The `InMemoryBroker` is causing a `StackOverflowException` when it gets disposed, causing the integration tests to fail.\r\n\r\n(Thank you @gitjosephbeer for notifying it...the fix will be up in no time \ud83d\ude09)"}
{"hash": "65bf1f9d8bb91213e6896fa12f7624acdf767529", "message": "Minor performance improvement to avoid allocating on the hot path of the timer controller\n\nrefs #48", "cs_files": ["TimerController.cs"], "prev_hash": "fad169638a45684090bf9c45c5bc9227f7616cf6", "repo_url": "https://github.com/DaveTCode/GBADotnet", "repo_name": "DaveTCode/GBADotnet", "issue_id": "48", "instance_id": "davetcode_gbadotnet__48__6.0", "dotnet_version": "net6.0", "image_tag": "perfbench.eval.x86_64.davetcode_gbadotnet__48__6.0:msbench-0.0.3", "problem_statement": "Whilst there are lots of micro optimisations across the application the fundamental architecture is _slow_.\r\n\r\n![image](https://user-images.githubusercontent.com/1358414/160572224-05e4d718-345f-4672-8a3a-2d004fa5d671.png)\r\n\r\nshows the breakdown of CPU time spent during a frame. Notably it's _not_ the ppu or cpu which are causing <60fps on my device. It's the timer controller and dma controller which are stepping every cycle and causing slowdowns.\r\n\r\nMany emulators use a scheduler to get around this issue, instead of ticket components like the timer each cycle they specify when an event like reload will occur and simply skip through to then (caveat that it needs to handle cpu reads). That's certainly one option here although I'd like to see if I can improve performance in other ways first."}
{"hash": "92ae8c72e170c9ec46f16884f1e75a2fc8bd366e", "message": "Added DMA timing documentation with findings from solving AGS prio tests\n\nAlso fixed issue where internal cycle 2 of DMA must block the bus. Fixes memory tests in mgba and also some DMA timings tests which were showing very daft results\n\nFixes #56", "cs_files": ["DmaController.cs"], "prev_hash": "317fd629c3158ef6a8074c1d3a15d9cd4e2742fe", "repo_url": "https://github.com/DaveTCode/GBADotnet", "repo_name": "DaveTCode/GBADotnet", "issue_id": "56", "instance_id": "davetcode_gbadotnet__56__6.0", "dotnet_version": "net6.0", "image_tag": "perfbench.eval.x86_64.davetcode_gbadotnet__56__6.0:msbench-0.0.3", "problem_statement": "At some point in the last week or two I've gone from passing all the mgba memory tests to \r\n![image](https://user-images.githubusercontent.com/1358414/161332759-4ff8f2f4-2716-43ee-b06d-dc4f1dfc9aaf.png)\r\n\r\nThe issues seem specific to DMA store into PPU memory:\r\n![image](https://user-images.githubusercontent.com/1358414/161332837-29fbce1b-1ddd-4178-be08-e55cc82ba4dc.png)\r\n\r\n![image](https://user-images.githubusercontent.com/1358414/161332885-e04e2372-00ce-44da-8c37-2c4f0bd8804d.png)\r\n\r\n![image](https://user-images.githubusercontent.com/1358414/161332922-2a8a7d6d-c2f8-425f-98cd-c699064968af.png)\r\n\r\nMaybe something to do with latching values? Possibly related to issues with DMA timings in mgba test where they appear to ignore wait states now"}
{"hash": "e03ae14278f7cccf8d58a9302f3ec2c813cb869e", "message": "Rework license validator to not use ConcurrentDictionary\n- ConcurrentDictionary has excellent concurrency performance for reading/writing\n  invidivual key/values. But the locking pattern for reading the count and\n  getting all keys is quite bad.\n- Add tests\n- Fixes #1526", "cs_files": ["IdentityServerLicenseValidator.cs", "LicenseValidator.cs", "IdentityServerLicenseValidatorTests.cs"], "prev_hash": "00982dc7fc704756698915898c352dade2d03043", "repo_url": "https://github.com/DuendeSoftware/products", "repo_name": "DuendeSoftware/products", "issue_id": "1526", "instance_id": "duendesoftware_products__1526__8.0", "dotnet_version": "net8.0", "image_tag": "perfbench.eval.x86_64.duendesoftware_products__1526__8.0:msbench-0.0.3", "problem_statement": "The `ConcurrentDictionary` type is optimized for concurrent key/value reads/write. The `Count` and `Keys` properties has inefficient locking mechanisms. Performing multiple operations on a `ConcurrentDictionary` also adds a performance penalty as each operation acquires and releases the locks. It would be much more efficient to acquire the locks required, then perform all the operations and then release.\r\n\r\nThis has been reported in https://github.com/DuendeSoftware/Support/issues/1161."}
{"hash": "63f14067663e206af401bcb63410ef270b7b593c", "message": "#57 - Change how image drawing is performed to improve performance", "cs_files": ["ImageDataTests.cs", "TestHelpers.cs", "ImageData.cs", "GLWindowFacade.cs", "ImageService.cs"], "prev_hash": "0139903bc271f46eb89d9549a7686c1970c1dc0a", "repo_url": "https://github.com/KinsonDigital/Velaptor", "repo_name": "KinsonDigital/Velaptor", "issue_id": "57", "instance_id": "kinsondigital_velaptor__57__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.kinsondigital_velaptor__57__9.0:msbench-0.0.3", "problem_statement": "### I have done the items below . . .\r\n\r\n- [X] I have updated the title by replacing the '**_<title_**>' section.\r\n\r\n### Description\r\n\r\nIt has been discovered that there is some large heap allocations occurring due to the way fonts and sounds are loaded.  This is due to closures that are currently implemented.  Improve these large heap allocations.\r\n\r\n**Allocations Detected In Rider:**\r\n![image](https://user-images.githubusercontent.com/85414302/133780749-412e53c9-a427-4d1c-87d1-6c994cdbdb14.png)\r\n\r\nRefer to [this article](https://www.jetbrains.com/help/rider/2021.2/Fixing_Issues_Found_by_DPA.html#method-group-instead-of-lambda) to help resolve the issue.\r\n\r\n### Acceptance Criteria\r\n\r\n**This issue is finished when:**\r\n- [x] Unit tests added\r\n- [x] All unit tests pass\r\n\r\n\r\n### ToDo Items\r\n\r\n- [x] Draft pull request created and linked to this issue\r\n- [x] Priority label added to issue (low priority, medium priority, or high priority)\r\n- [x] Issue linked to the proper project\r\n- [x] Issue linked to proper milestone\r\n- [x] Unit tests have been written and/or adjusted for code additions or changes\r\n- [x] All unit tests pass\r\n\r\n### Issue Dependencies\r\n\r\n_No response_\r\n\r\n### Related Work\r\n\r\n_No response_"}
{"hash": "871437bd7c860770d988405d0a9d00f1cf39be13", "message": "Fixing RasterizingLayer memory leak #92", "cs_files": ["MapRenderer.cs"], "prev_hash": "c3ff1b02fd6689832b0291db8f1781ee31910e6b", "repo_url": "https://github.com/Mapsui/Mapsui", "repo_name": "Mapsui/Mapsui", "issue_id": "92", "instance_id": "mapsui_mapsui__92__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.mapsui_mapsui__92__9.0:msbench-0.0.3", "problem_statement": "Hello pauldendulk\nwhen i use bellow  code to Rasterize my earthquakes points (up to 50000 point), at first everything is OK and map responses to mouse normally but after some zooming and moving on map (about 6 minute), i face to a map that responses very very slowly. in your samples you used small  shapefile data source that works fine, but it seems that the issue maybe in MemoryProvider or RasterizingLayer. \nthank you \n\nmy code:\n\nMapControl.Map.Layers.Clear();\nMapControl.Map.Layers.Add(OsmSample.CreateLayer());\nMemoryProvider m_p = new MemoryProvider();\n Feature feature;\n Random rnd = new Random();\n for (int i = 0; i < 10000;i++)\n  {\n      feature= new Feature { Geometry = new Mapsui.Geometries.Point(rnd.Next(100000,5000000),  rnd.Next(100000,5000000)) };\n     m_p.Features.Add(feature);\n }\nLayers.MemoryLayer ly = new Layers.MemoryLayer();\nly.DataSource = m_p;\nMapsui.Layers.RasterizingLayer rs = new Layers.RasterizingLayer(ly);\nMapControl.Map.Layers.Add(rs);\n"}
{"hash": "ac83a39764948216c2a2670f88422e1a9f0282b8", "message": "Fixed performane bug by changing the order of transform and grow  #414", "cs_files": ["FeatureFetchDispatcher.cs"], "prev_hash": "92fa9a8cd46bc42fc31118bf818e29a1d53d0e7b", "repo_url": "https://github.com/Mapsui/Mapsui", "repo_name": "Mapsui/Mapsui", "issue_id": "414", "instance_id": "mapsui_mapsui__414__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.mapsui_mapsui__414__9.0:msbench-0.0.3", "problem_statement": "When using a Mapsui 1.4.1 app with >1000 small polygons (non overlapping ), performance is considered as suboptimal.  Even when zoomed in to a few polygons the performance is not good, so it seems there is some issue with spatial indexing going on. \r\n\r\nI can create a reproducible case if needed.\r\n"}
{"hash": "c7a2557916095e4a541c11ba0150135b566980ae", "message": "#202 Eliminate unnecessary recalculation, looping, and memory allocation.", "cs_files": ["BrokenRulesCollection.cs"], "prev_hash": "eeff2623f6e5d347513296919858e55f26520e2d", "repo_url": "https://github.com/MarimerLLC/csla", "repo_name": "MarimerLLC/csla", "issue_id": "202", "instance_id": "marimerllc_csla__202__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.marimerllc_csla__202__9.0:msbench-0.0.3", "problem_statement": "The BrokenRulesCollection burns quite a lot of unnecessary cycles, for example recomputing the various counts upon every call to ClearRules and SetBrokenRules.\n\nIt also burns quite a lot of unnecessary memory, for example using Enumerable and Enumerator to go through IList instances.\n\nThis is especially problematic given the fact that one call to ClearRules and one call to SetBrokenRules is executed every time a property's or object's rules are checked.\n"}
{"hash": "1bfd72f585e53bdddbe01c71639b7e3e17b64139", "message": "Issue#34 Greatly improved Json serializer performance", "cs_files": ["JsonArray.cs", "JsonObject.cs"], "prev_hash": "428a8201951dfbbaf58f66cf88f8dd3943a55769", "repo_url": "https://github.com/Marvin-Brouwer/FluentSerializer", "repo_name": "Marvin-Brouwer/FluentSerializer", "issue_id": "34", "instance_id": "marvin-brouwer_fluentserializer__34__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.marvin-brouwer_fluentserializer__34__9.0:msbench-0.0.3", "problem_statement": "The check to make sure the last property in an object is very heavy.\r\nTry improving this with an index number."}
{"hash": "97aad143c1d01dd0ce517d1e97afe8bd9afbfb90", "message": "Added a PendingTaskCollection, which self-cleans as tasks complete successfully to avoid memory growth fixed #1563", "cs_files": ["BaseReceiveContext.cs", "InMemoryOutboxMessageSchedulerContext.cs", "JsonConsumeContext.cs", "StaticConsumeContext.cs", "PendingTaskCollection.cs"], "prev_hash": "703d5c19d6137b211252978a4381ce3e33ec1ad1", "repo_url": "https://github.com/MassTransit/MassTransit", "repo_name": "MassTransit/MassTransit", "issue_id": "1563", "instance_id": "masstransit_masstransit__1563__8.0", "dotnet_version": "net8.0", "image_tag": "perfbench.eval.x86_64.masstransit_masstransit__1563__8.0:msbench-0.0.3", "problem_statement": "Completed Receive and Consume tasks should automatically be removed from the pending list, to avoid increasing the memory usage when a large number of tasks are performed by a consumer (such as 100,000's of publish/send calls).\r\n"}
{"hash": "ca8cf2a33fc59ab3889fb9b91d34fdeec2cde2d5", "message": "Added filtering to the CommanderNamesThemes dialog.\n\nHave added filtering to the Command name themes dialog as per issue #16\nUnfortunately the performance is terrible. Solution is to either change\nthe data source from a list to something that supports filtering via\nIBindingListView OR to change the DataGridVioew to Virtual Mode, like\nso: https://msdn.microsoft.com/en-us/library/15a31akc.aspx", "cs_files": ["CommanderNameTheme.cs", "CommanderNameThemes.cs", "CommanderNameThemesDialog.Designer.cs", "CommanderNameThemesDialog.cs"], "prev_hash": "0325cdd3ccc97291b41cd5bb593d96b8d5c71024", "repo_url": "https://github.com/Pulsar4xDevs/Pulsar4x", "repo_name": "Pulsar4xDevs/Pulsar4x", "issue_id": "16", "instance_id": "pulsar4xdevs_pulsar4x__16__8.0", "dotnet_version": "net8.0", "image_tag": "perfbench.eval.x86_64.pulsar4xdevs_pulsar4x__16__8.0:msbench-0.0.3", "problem_statement": "I know that this probably would be low priority, but I think that it would be helpful to have a way to filter the list of name in the commander names window (as there are quite a few in any given set) for increased ease of use.\n"}
{"hash": "193e41353ebbc0b7563ff69f64cc815226403008", "message": "SP5 WinForms demo: improve SharedAxis simplicity and performance\n\nlayout matching is still required #2802", "cs_files": ["SharedAxes.cs"], "prev_hash": "a7b763d24c8e89bac0a4d75f75aebd2379c00ff2", "repo_url": "https://github.com/ScottPlot/ScottPlot", "repo_name": "ScottPlot/ScottPlot", "issue_id": "2802", "instance_id": "scottplot_scottplot__2802__8.0", "dotnet_version": "net8.0", "image_tag": "perfbench.eval.x86_64.scottplot_scottplot__2802__8.0:msbench-0.0.3", "problem_statement": "ScottPlot5 needs a strategy to match layouts\r\n\r\nScottPlot4 did this in a clunky way https://scottplot.net/faq/shared-axes/#matching-layouts\r\n\r\n![image](https://github.com/ScottPlot/ScottPlot/assets/4165489/b1900277-f8b8-4ce8-9348-a1cb1958800f)\r\n"}
{"hash": "bcb43ceda3d2a160f21bdcf5bdb151cfc9cdc48a", "message": "SP5 WPF Sandbox: multiple heavy signal plots\n\ndemonstrates a performance issue described in #3188", "cs_files": ["MainWindow.xaml.cs"], "prev_hash": "3caba207274ad8404cf414abf66d756e2f8d596f", "repo_url": "https://github.com/ScottPlot/ScottPlot", "repo_name": "ScottPlot/ScottPlot", "issue_id": "3188", "instance_id": "scottplot_scottplot__3188__8.0", "dotnet_version": "net8.0", "image_tag": "perfbench.eval.x86_64.scottplot_scottplot__3188__8.0:msbench-0.0.3", "problem_statement": "Issue: I displayed 11 charts with 7 milion points each. Every chart has shared x axis and locked y left axis. When I zoom charts, performance is increasing but when I zoom too much it's starting to decrease and memory usage starts to grow.\r\n\r\nReproducing:\r\n\r\nHere is example code:\r\n\r\n## MainWindow.xaml.cs\r\n\r\n```cs\r\nnamespace WpfApp2\r\n{\r\n    /// <summary>\r\n    /// Interaction logic for MainWindow.xaml\r\n    /// </summary>\r\n    public partial class MainWindow : Window\r\n    {\r\n        public MainWindow()\r\n        {\r\n            InitializeComponent();\r\n            ShowCharts();\r\n        }\r\n\r\n        private void ShowCharts()\r\n        {\r\n            var list = new List<WpfPlotGL>();\r\n\r\n            for (int i = 0; i < 11; i++)\r\n            {\r\n                var values = Generate.RandomWalk(7016960);\r\n\r\n                var floatvalues = new float[values.Length];\r\n\r\n                for (var j = 0; j < values.Length; j++)\r\n                    floatvalues[j] = (float)values[j];\r\n\r\n                var plot = new WpfPlotGL();\r\n                plot.Plot.Add.Signal(floatvalues, 256);\r\n                list.Add(plot);\r\n            }\r\n\r\n            foreach (var chart in list)\r\n            {\r\n                chart.Height = 200;\r\n\r\n                int controlNumber = 0;\r\n\r\n                while (controlNumber < list.Count)\r\n                {\r\n                    int i = controlNumber;\r\n                    if (chart != list[i])\r\n                    {\r\n                        chart.Plot.RenderManager.AxisLimitsChanged += (s, e) => { ApplyLayoutToOtherPlot(chart, list[i]); };\r\n                    }\r\n                    controlNumber++;\r\n                }\r\n\r\n                LockedVertical rule = new LockedVertical(chart.Plot.Axes.Left);\r\n                chart.Plot.Axes.Rules.Clear();\r\n                chart.Plot.Axes.Rules.Add(rule);\r\n                chart.Refresh();\r\n                this.charts.Children.Add(chart);\r\n            }\r\n        }\r\n\r\n        private void ApplyLayoutToOtherPlot(IPlotControl source, IPlotControl dest)\r\n        {\r\n            AxisLimits axesBefore = dest.Plot.Axes.GetLimits();\r\n            dest.Plot.Axes.SetLimitsX(source.Plot.Axes.GetLimits());\r\n            AxisLimits axesAfter = dest.Plot.Axes.GetLimits();\r\n            if (axesBefore != axesAfter)\r\n            {\r\n                dest.Refresh();\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## MainWindow.xaml\r\n\r\n```xml\r\n<Window x:Class=\"WpfApp2.MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n        xmlns:local=\"clr-namespace:WpfApp2\"\r\n        mc:Ignorable=\"d\"\r\n        Title=\"MainWindow\" Height=\"450\" Width=\"800\">\r\n\r\n    <Grid>\r\n        <Grid.ColumnDefinitions>\r\n            <ColumnDefinition Width=\"2*\"/>\r\n            <ColumnDefinition Width=\"2*\"/>\r\n        </Grid.ColumnDefinitions>\r\n        <Grid.RowDefinitions>\r\n            <RowDefinition Height=\"2*\"/>\r\n            <RowDefinition Height=\"2*\"/>\r\n        </Grid.RowDefinitions>\r\n\r\n        <ScrollViewer Grid.Column=\"0\" Grid.Row=\"0\" Grid.RowSpan=\"2\">\r\n            <StackPanel x:Name=\"charts\">\r\n\r\n            </StackPanel>\r\n        </ScrollViewer>\r\n    </Grid>\r\n</Window>\r\n```\r\n\r\n### System Details\r\nScottPlot Version: 5.0.14-beta\r\nOperating System: Windows 11\r\nApplication Type: WPF\r\n.NET Version: .NET 7.0"}
{"hash": "0885716a747fe930aa5513a244d4b116b63e029f", "message": "Plot: improve GetNextColor() performance\n\nresolves #4218", "cs_files": ["PlottableAdder.cs"], "prev_hash": "6b549fd2209cc17c19966a317b6afd53732d9642", "repo_url": "https://github.com/ScottPlot/ScottPlot", "repo_name": "ScottPlot/ScottPlot", "issue_id": "4218", "instance_id": "scottplot_scottplot__4218__8.0", "dotnet_version": "net8.0", "image_tag": "perfbench.eval.x86_64.scottplot_scottplot__4218__8.0:msbench-0.0.3", "problem_statement": "This isn't a bug per se, more of a significant change in performance.   Although the example program is unrealistic, the performance difference is significant enough it still may cause performance issues when using a small number of colors.  \r\n\r\nThat being said, it's unlikely the average user would encounter this, so it may not be worth addressing, I just thought I'd mention it.\r\n\r\nIt appears this was introduced in commit https://github.com/ScottPlot/ScottPlot/commit/3da89c3474f3cb459b04ea56782042e9893da249 as a fix to issue https://github.com/ScottPlot/ScottPlot/pull/4175\r\n\r\n**Issue:** Accessing colors in a colormap is approximately 500 times slower than in the previous version\r\n\r\n**ScottPlot Version:** ScottPlot.WPF 5.0.38\r\n\r\n```cs\r\nusing System.Diagnostics;\r\nusing ScottPlot;\r\n\r\nvar colorMap = new ScottPlot.Colormaps.Algae();\r\nvar plot = new ScottPlot.Plot();\r\n\r\nvar startTime = Stopwatch.GetTimestamp();\r\nvar iterations = 0;\r\nfor(int count = 1; count < 256; count++)\r\n{\r\n\tvar xs = Generate.Consecutive(count);\r\n\tvar ys = Generate.Repeating(count, count);\r\n\tvar colors = colorMap.GetColors(count);\r\n\r\n\tfor(int i=0; i<count; i++)\r\n\t{\r\n\t\tvar circle = plot.Add.Circle(xs[i], ys[i], 0.45);\r\n\t\tcircle.FillColor = colors[i];\r\n\t\tcircle.LineWidth = 0;\r\n\t\titerations++;\r\n\t}\r\n}\r\n\r\nvar totalSeconds = Stopwatch.GetElapsedTime(startTime).TotalSeconds;\r\nConsole.WriteLine($\"{iterations:N0} iterations in {totalSeconds:N2} seconds.   {iterations/totalSeconds:N2} iterations/sec\");\r\n\r\nplot.SavePng(\"colorMapTest.png\", 1080, 1080);\r\n```\r\n\r\nTo reproduce, run the above with version 5.0.38, then with 5.0.37.\r\n\r\nResults: \r\n  \r\n5.0.37 -  32,640 iterations in 0.01 seconds.   3,449,952.44 iterations/sec\r\n5.0.38 - 32,640 iterations in 5.16 seconds.   6,330.13 iterations/sec\r\n\r\n\r\n\r\n"}
{"hash": "392aa3da6ec90a182e8ea20f4f553a65271c806d", "message": "Controls: fix zoom rectangle bug\n\nPreviously middle-click-drag zooming could get stuck if it was performed simultaneously with scroll wheel actions. Fixes #1226", "cs_files": ["Backend.cs"], "prev_hash": "25979cc18a074b1f4a7ffb03295a6f1b75869473", "repo_url": "https://github.com/ScottPlot/ScottPlot", "repo_name": "ScottPlot/ScottPlot", "issue_id": "1226", "instance_id": "scottplot_scottplot__1226__8.0", "dotnet_version": "net8.0", "image_tag": "perfbench.eval.x86_64.scottplot_scottplot__1226__8.0:msbench-0.0.3", "problem_statement": "## Bug Report\r\n\r\n**Issue:** \r\nIf another plot interaction is performed quickly enough after a rubber band zoom the selection rectangle stays in the plot.\r\n\r\n![zoom](https://user-images.githubusercontent.com/13303792/131261045-ca10cf31-ea4d-4862-b900-3e49f83d8b35.gif)\r\n\r\n**Reproducing:**\r\nZoom in using alt+mouse selection or mouse wheel-selection and then quickly drag the plot (or zoom by mouse wheel scrolling). \r\n`\r\n### System Details\r\n* **ScottPlot Version:** 4.1.17\r\n* **Operating System:** Windows 10\r\n* **Application Type:** WinForms\r\n* **.NET Version:** .NET 5.0"}
{"hash": "9b135ae6720d9adff18b379f62aff5f993f79fad", "message": "Optimize BinaryStringToBitBlockList\n\nThis is inspired by the stack trace of #207 where BinaryStringToBitBlockList is mentioned.\nOften logic can be written quite concise using Linq.\nWhen asking about raw performance Linq is almost never the answer.\n\nI tried benchmarking the current implementation against this one using BenchmarkDotNet.\n\n```\n| Method |       Runtime |        Mean |     Error |    StdDev | Ratio |  Gen 0 | Gen 1 | Gen 2 | Allocated |\n|------- |-------------- |------------:|----------:|----------:|------:|-------:|------:|------:|----------:|\n|    Old |    .NET 4.7.2 | 11,685.9 ns | 132.05 ns | 123.52 ns |  1.00 | 3.3112 |     - |     - |   10439 B |\n|    New |    .NET 4.7.2 |    216.9 ns |   2.66 ns |   2.36 ns |  0.02 | 0.1810 |     - |     - |     570 B |\n|        |               |             |           |           |       |        |       |       |           |\n|    Old | .NET Core 2.1 | 10,543.3 ns | 153.23 ns | 135.84 ns |  1.00 | 2.9907 |     - |     - |    9456 B |\n|    New | .NET Core 2.1 |    205.4 ns |   1.87 ns |   1.75 ns |  0.02 | 0.1805 |     - |     - |     568 B |\n|        |               |             |           |           |       |        |       |       |           |\n|    Old | .NET Core 3.1 |  9,035.3 ns | 103.41 ns |  96.73 ns |  1.00 | 2.7924 |     - |     - |    8792 B |\n|    New | .NET Core 3.1 |    202.3 ns |   1.69 ns |   1.49 ns |  0.02 | 0.1554 |     - |     - |     488 B |\n```\n\nAs seen this implementation is ~50x faster and memory allocations is reduced by ~18x.", "cs_files": ["QRCodeGenerator.cs"], "prev_hash": "eedff45121e33bdfeb0e9ff66fba11db7371e794", "repo_url": "https://github.com/codebude/QRCoder", "repo_name": "codebude/QRCoder", "issue_id": "207", "instance_id": "codebude_qrcoder__207__8.0", "dotnet_version": "net8.0", "image_tag": "perfbench.eval.x86_64.codebude_qrcoder__207__8.0:msbench-0.0.3", "problem_statement": "<!--\r\nThanks for helping us. Feel free to use/edit the template below for your issue/report.\r\nUse \"Preview\" to view your issue before posting.\r\n\r\nNote: Your issue may already be reported!\r\nPlease search on the issue track before creating a new one:\r\nhttps://github.com/codebude/QRCoder/issues?utf8=%E2%9C%93&q=\r\n-->\r\n\r\n## Type of issue\r\n[ x] Bug  \r\n[ ] Question (e.g. about handling/usage)  \r\n[ ] Request for new feature/improvement  \r\n\r\n## Expected Behavior\r\n<!--\r\n- If you're describing a bug, tell us what should happen  \r\n- If you have a question, ask it here  \r\n- If you're suggesting a change/improvement, tell us how it should work  \r\n-->\r\nReturns QR code, which is then printed as graphic object.\r\n\r\n## Current Behavior\r\n<!--\r\n- If describing a bug, tell us what happens instead of the expected behavior  \r\n- If suggesting a change/improvement, explain the difference from current behavior  \r\n-->\r\nCrash with out-of-memory exception.\r\n\r\n## Possible Solution (optional)\r\n<!--\r\nNot obligatory, but suggest a fix/reason for the bug or ideas how to implement the addition or new feature.  \r\n-->\r\n\r\n## Steps to Reproduce (for bugs)\r\n<!--\r\nProvide a link to a live example, or an unambiguous set of steps to reproduce this bug. Include code to reproduce, files or images that explain how to reproduce the bug.\r\n-->\r\nhttps://paste.ubuntu.com/p/CFPTf4JMt7/\r\n\r\n## Your Environment\r\n<!--\r\nInclude as many relevant details about the environment you experienced the bug in.  \r\nWindows 7.\r\n\r\n\r\n* Version used:  latest master, as of 15.10.2020, but same thing happened with 1.3.3\r\n* Compiled from source or NuGet package?:  From source\r\n* Payload/Encoded text:  happens probably with any text\r\n\r\n```text\r\n ===== V\u00ddJIMKA =====\r\nSystem.OutOfMemoryException: Byla vyvol\u00e1na v\u00fdjimka typu System.OutOfMemoryException.\r\n   v System.Linq.Lookup`2.GetGrouping(TKey key, Boolean create)\r\n   v System.Linq.Lookup`2.Create[TSource](IEnumerable`1 source, Func`2 keySelector, Func`2 elementSelector, IEqualityComparer`1 comparer)\r\n   v System.Linq.GroupedEnumerable`3.GetEnumerator()\r\n   v System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()\r\n   v System.Collections.Generic.List`1..ctor(IEnumerable`1 collection)\r\n   v System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)\r\n   v QRCoder.QRCodeGenerator.BinaryStringToBitBlockList(String bitString) v d:\\ServerFolders\\SpravaProjektu\\Jenkins\\workspace\\QRCoder\\QRCoder\\QRCodeGenerator.cs:\u0159\u00e1dek 935\r\n   v QRCoder.QRCodeGenerator.GenerateQrCode(String bitString, ECCLevel eccLevel, Int32 version) v d:\\ServerFolders\\SpravaProjektu\\Jenkins\\workspace\\QRCoder\\QRCoder\\QRCodeGenerator.cs:\u0159\u00e1dek 196\r\n   v QRCoder.QRCodeGenerator.GenerateQrCode(String plainText, ECCLevel eccLevel, Boolean forceUtf8, Boolean utf8BOM, EciMode eciMode, Int32 requestedVersion) v d:\\ServerFolders\\SpravaProjektu\\Jenkins\\workspace\\QRCoder\\QRCoder\\QRCodeGenerator.cs:\u0159\u00e1dek 145\r\n   v QRCoder.QRCodeGenerator.CreateQrCode(String plainText, ECCLevel eccLevel, Boolean forceUtf8, Boolean utf8BOM, EciMode eciMode, Int32 requestedVersion) v d:\\ServerFolders\\SpravaProjektu\\Jenkins\\workspace\\QRCoder\\QRCoder\\QRCodeGenerator.cs:\u0159\u00e1dek 76\r\n   v PraktikSW.SluzbyPraktika.ModulTisk.TiskoveNastroje.TiskovaUloha.TisknoutStranku(Object sender, PrintPageEventArgs e)\r\n   v System.Drawing.Printing.PrintDocument.OnPrintPage(PrintPageEventArgs e)\r\n   v System.Drawing.Printing.PrintDocument._OnPrintPage(PrintPageEventArgs e)\r\n   v System.Drawing.Printing.PrintController.PrintLoop(PrintDocument document)\r\n   v System.Drawing.Printing.PrintController.Print(PrintDocument document)\r\n   v System.Drawing.Printing.PrintDocument.Print()\r\n   v PraktikSW.SluzbyPraktika.ModulTisk.TiskoveNastroje.TiskovaUloha.Vytisknout(Fronta fronta, TiskDokumentuArgumentUdalosti pozadavek, Formular formular, Boolean rozsirenyTisk, PrintDocument dokument, ModulTisk modul)\r\n   v PraktikSW.SluzbyPraktika.ModulTisk.Sluzby.TiskDokumentu.VytisknoutUlohu(Fronta fronta, TiskovaUloha uloha, TiskDokumentuArgumentUdalosti pozadavek)\r\n ===== V\u00ddJIMKA =====\r\n```"}
{"hash": "9b437acec9fa8f88669d34690983a648fa0bcde5", "message": "Do not propagate a CancellationToken from a method arg to a long-lived state machine\n\nThis fixes #414, which is a hang that occurs when the `CancellationToken` passed to `MultiplexingStream.CreateAsync` is cancelled after `CreateAsync` has completed.", "cs_files": ["MultiplexingStreamTests.cs", "MultiplexingStream.cs"], "prev_hash": "ab053bb6cc903ac4a48ba198f126b5e021905e33", "repo_url": "https://github.com/dotnet/Nerdbank.Streams", "repo_name": "dotnet/Nerdbank.Streams", "issue_id": "414", "instance_id": "dotnet_nerdbank.streams__414__8.0", "dotnet_version": "net8.0", "image_tag": "perfbench.eval.x86_64.dotnet_nerdbank.streams__414__8.0:msbench-0.0.3", "problem_statement": "When `MultiplexingStream.CreateAsync` is called with a `CancellationToken` and that token is subsequently canceled (while the mxstream is very much active), it can lead to a hang when a channel has been given bytes to write out, but they will never be read, even though the MultiplexingStream and its Channel have never been disposed.\r\n\r\n```\r\n0:000> !pe 0000021b3b7fbec0\r\nException object: 0000021b3b7fbec0\r\nException type:   System.OperationCanceledException\r\nMessage:          The operation was canceled.\r\nInnerException:   <none>\r\nStackTrace (generated):\r\n    SP               IP               Function\r\n    0000001FF3DFDBC0 00007FFF269C0A83 System_Private_CoreLib!System.Threading.CancellationToken.ThrowOperationCanceledException()+0x53\r\n    0000001FF3DFDC00 00007FFF268CECF6 System_Private_CoreLib!System.Threading.CancellationToken.ThrowIfCancellationRequested()+0x5d1d2016\r\n    0000001FF3DFDC30 00007FFEC9014D96 System_IO_Pipelines!System.IO.Pipelines.Pipe.GetReadAsyncResult()+0xd6\r\n    0000001FF3DFDCC0 00007FFEC9014B59 System_IO_Pipelines!System.IO.Pipelines.Pipe+DefaultPipeReader.GetResult(Int16)+0x29\r\n    0000001FF3DFDCF0 00007FFEC90035CA Nerdbank_Streams!Nerdbank.Streams.PipeExtensions+<>c__DisplayClass7_0+<<UsePipeWriter>b__0>d.MoveNext()+0x41a\r\n    0000001FF3DF9C60 00007FFF26A05B61 System_Private_CoreLib!System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()+0x21\r\n    0000001FF3DF9C90 00007FFEC8FFEA35 System_IO_Pipelines!System.IO.Pipelines.PipeCompletion.IsCompletedOrThrow()+0xff901cf5\r\n    0000001FF3DF9CD0 00007FFEC8FFE7DB System_IO_Pipelines!System.IO.Pipelines.Pipe.GetFlushResult(System.IO.Pipelines.FlushResult ByRef)+0x5b\r\n    0000001FF3DF9D10 00007FFEC8FFC87B System_IO_Pipelines!System.IO.Pipelines.Pipe.PrepareFlush(System.IO.Pipelines.CompletionData ByRef, System.Threading.Tasks.ValueTask`1<System.IO.Pipelines.FlushResult> ByRef, System.Threading.CancellationToken)+0xbb\r\n    0000001FF3DF9DA0 00007FFEC8FFC439 System_IO_Pipelines!System.IO.Pipelines.Pipe.FlushAsync(System.Threading.CancellationToken)+0x69\r\n    0000001FF3DF9E40 00007FFEC8FFC20D System_IO_Pipelines!System.IO.Pipelines.Pipe+DefaultPipeWriter.FlushAsync(System.Threading.CancellationToken)+0x2d\r\n    0000001FF3DF9E70 00007FFEC8FFC033 Nerdbank_Streams!Nerdbank.Streams.MultiplexingStream+Formatter.FlushAsync(System.Threading.CancellationToken)+0x43\r\n    0000001FF3DF9EB0 00007FFEC9026869 Nerdbank_Streams!Nerdbank.Streams.MultiplexingStream+<SendFrameAsync>d__71.MoveNext()+0x679\r\n```"}
{"hash": "021b896cddb65b22633bc8e9d4e7b3296884cc92", "message": "Fix hang in `MultiplexingStream.Channel.Input.CopyToAsync`\n\nThe overrides we had for this method simply delegated to the underlying pipe, which omitted advancing the limited backpressure 'window' as reading took place. This led to a hang when the data to be read exceeded the window size. Since the default implementation of `CopyToAsync` in the base class is simply a loop that calls `ReadAsync` and `AdvanceTo`, we can just delete our overrides. Our `AdvanceTo` method includes a window advancement.\n\nFixes #506", "cs_files": ["MultiplexingStreamV2Tests.cs", "TestBase.cs", "MultiplexingStream.Channel.cs"], "prev_hash": "c5683bea1c776521445818e010a656a96d58b873", "repo_url": "https://github.com/dotnet/Nerdbank.Streams", "repo_name": "dotnet/Nerdbank.Streams", "issue_id": "506", "instance_id": "dotnet_nerdbank.streams__506__8.0", "dotnet_version": "net8.0", "image_tag": "perfbench.eval.x86_64.dotnet_nerdbank.streams__506__8.0:msbench-0.0.3", "problem_statement": "A multiplexing channel in protocol version 2 and later has a 'window size' to limit the size of a receive buffer. As data is read from the buffer, the occupied bytes in the 'window' are freed, allowing for more data to be transmitted. This works in the channel's typical read functions. But its CopyToAsync override simply defers to the underlying pipe's implementation, and never advances the window. This leads to a hang where data cannot be transmitted when the data exceeds the window size, and CopyToAsync never completes."}
{"hash": "d1ee1bef6b1122634048a919583c53e035124051", "message": "Avoid fast-path allocations in TryGetOptionValue\n\nFixes #4905", "cs_files": ["AbstractCategorizedAnalyzerConfigOptions.cs", "OptionKey.cs"], "prev_hash": "469a837deb6bb4bc63006fd3ce5f928ed85d244b", "repo_url": "https://github.com/dotnet/roslyn-analyzers", "repo_name": "dotnet/roslyn-analyzers", "issue_id": "4905", "instance_id": "dotnet_roslyn-analyzers__4905__8.0", "dotnet_version": "net8.0", "image_tag": "perfbench.eval.x86_64.dotnet_roslyn-analyzers__4905__8.0:msbench-0.0.3", "problem_statement": "Performance trace reveals heavy allocations in `AbstractCategorizedAnalyzerConfigOptions.TryGetOptionValue`, centered around two things that occur on the fast path:\r\n\r\n1. String concatenation for the key\r\n2. Capturing the parameters"}
{"hash": "d16054aac9a664e0603b89629ece7d0a439565d0", "message": "Small Performance Improvements\n\nUse the default buffer size when copying from one stream to another\n\nSwitch between default serializer and indented serializer with conditional ternary rather than allocating a dictionary\n\nIntroduce BufferSize property with a default size of 1024 to use when writing json to the request stream. Performance tests as part of #1899 indicate this to be a good compromise buffer size for performance throughput and bytes allocated.\n\n(cherry picked from commit 96f325417fe56fde4a38bf7a7f29a03d74d8e87c)", "cs_files": ["ElasticsearchDefaultSerializer.cs", "ResponseBuilder.cs", "PostData.cs", "JsonNetSerializer.cs", "BulkRequestJsonConverter.cs", "BulkResponseItemJsonConverter.cs"], "prev_hash": "6b15f509a78c5f096db43c8e4a5901654c45990e", "repo_url": "https://github.com/elastic/elasticsearch-net", "repo_name": "elastic/elasticsearch-net", "issue_id": "1899", "instance_id": "elastic_elasticsearch-net__1899__8.0", "dotnet_version": "net8.0", "image_tag": "perfbench.eval.x86_64.elastic_elasticsearch-net__1899__8.0:msbench-0.0.3", "problem_statement": "We have noticed a marked decrease in our indexing performance after moving from NEST 1.8.0 to NEST 2.0.4.  We are using parallel calls to BulkIndexOperations, and the speed is almost halved.\nIndexing 300k items with NEST 1.8.0 takes about 5.4 seconds, while with 2.0.4, it takes about 8.6 seconds.  Please see the attached code samples, and let me know if were are doing something wrong, or if this is to be expected.\n\n[NESTPerformanceTest.zip](https://github.com/elastic/elasticsearch-net/files/164758/NESTPerformanceTest.zip)\n"}
{"hash": "b1e599706d7b379872c72ee23f5137e9b047a33f", "message": "Improve performance on Robot_names_are_unique\n\nAssert.DoesNotContain() has performance issues.\nResolves #1263", "cs_files": ["RobotNameTest.cs"], "prev_hash": "ad3d0e67e6cb463ebb46fc0af3277b13216a4c84", "repo_url": "https://github.com/exercism/csharp", "repo_name": "exercism/csharp", "issue_id": "1263", "instance_id": "exercism_csharp__1263__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.exercism_csharp__1263__9.0:msbench-0.0.3", "problem_statement": "Due to a [weird implementation](https://github.com/xunit/xunit/issues/1543) of Assert.DoesNotContain in XUnit, `Robot_names_are_unique` (in RobotNameTest.cs) takes much longer than it needs to. \r\n\r\n`Assert.False(names.Contains(robot.Name));` causes an xunit analyzer warning, but if we combine that with the next line we can get even faster behavior and avoid the analyzer warning:\r\n```\r\nAssert.True(names.Add(robot.Name));\r\n```\r\nThis runs in 1.7 seconds instead of 7.3 seconds."}
{"hash": "172baadc2bea9a1c42cf1306d5e77e3c78625509", "message": "Dicom Server listener consumes large amount of memory if http request is sent to listener. #327", "cs_files": ["DicomService.cs"], "prev_hash": "a1c41cb2d64ff53e48592a2fd95bb3452bcc2926", "repo_url": "https://github.com/fo-dicom/fo-dicom", "repo_name": "fo-dicom/fo-dicom", "issue_id": "327", "instance_id": "fo-dicom_fo-dicom__327__8.0", "dotnet_version": "net8.0", "image_tag": "perfbench.eval.x86_64.fo-dicom_fo-dicom__327__8.0:msbench-0.0.3", "problem_statement": "I came across this completely by accident and not sure if this would be a real world issue.  However I could see this potentially being a problem.  \n### Expected behavior\n\nClose a non Dicom Connection.\n### Actual behavior\n\nConnection stays open and memory is consumed.\n### Steps to reproduce the behavior\n\nStart a DicomServer listener.  Open a web browser and navigate to http://IP:port of the DicomServer listener.  The listener seems to consume a large amount of memory that is never released.  Even when the web browser or socket is closed.  No errors seem to be logged.\n\n![image](https://cloud.githubusercontent.com/assets/9662532/16416543/c285bcfc-3d10-11e6-9332-27407e6b7a5b.png)\n### fo-dicom version and OS/platform\n\nTested on 2 and Beta 3.\n"}
{"hash": "1a44d87a7ed7b2624d89bc4810dad79a147b3936", "message": "Use CommunityToolkit.HighPerformance (#1473)\n\nMicrosoft.Toolkit.HighPerformance is no longer maintained. Switch to\nusing its successor CommunityToolkit.HighPerformance.", "cs_files": ["ArrayPoolMemory.cs", "ArrayPoolMemoryProvider.cs"], "prev_hash": "8ce19f12bd73b83ec26bd7df99e8eed055b1fb88", "repo_url": "https://github.com/fo-dicom/fo-dicom", "repo_name": "fo-dicom/fo-dicom", "issue_id": "1473", "instance_id": "fo-dicom_fo-dicom__1473__8.0", "dotnet_version": "net8.0", "image_tag": "perfbench.eval.x86_64.fo-dicom_fo-dicom__1473__8.0:msbench-0.0.3", "problem_statement": "**What is, according to you, missing from fo-dicom? Please describe.**\r\nCurrently, Fo-Dicom is using Microsoft.Toolkit.highperformance nuget package which is depreciated and it's alternate is Communitytoolkit.Highperformance. \r\n\r\n\r\n**Describe the solution you'd like**\r\nChange Nuget package to Communitytoolkit.Highperformance from Microsoft.Toolkit.highperformance\r\n\r\n**Describe possible alternatives or existing workarounds you've considered**\r\nA clear and concise description of any alternative solutions or existing workarounds you've considered.\r\n"}
{"hash": "91187e7e90e2d0f61c873f51b45da3fff0516b71", "message": "feat: Enanble memory<char> as parsing input #25", "cs_files": ["Lexer.cs", "Parser.cs"], "prev_hash": "a2d2c6354be17543f773f585b88b47f508f6e6b8", "repo_url": "https://github.com/furesoft/Silverfly", "repo_name": "furesoft/Silverfly", "issue_id": "25", "instance_id": "furesoft_silverfly__25__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.furesoft_silverfly__25__9.0:msbench-0.0.3", "problem_statement": "To avoid a string allocation enable to use memory<char>"}
{"hash": "1ecf09e8f3bcd82466fbc2f51557b25f2c0017d8", "message": "Lazy-load the Id properties for HtmlTagToken and HtmlAttribute\n\nThanks to @SebastianStehle for this performance optimization.\n\nOne of the suggestions described in issue #15", "cs_files": ["HtmlAttribute.cs", "HtmlToken.cs"], "prev_hash": "7a7f59c857cec9a4c6c235090463fc78703bdc02", "repo_url": "https://github.com/jstedfast/HtmlKit", "repo_name": "jstedfast/HtmlKit", "issue_id": "15", "instance_id": "jstedfast_htmlkit__15__6.0", "dotnet_version": "net6.0", "image_tag": "perfbench.eval.x86_64.jstedfast_htmlkit__15__6.0:msbench-0.0.3", "problem_statement": "Hi,\r\n\r\nI am evaluating whether a html parser could be a better fit for my mjml project: https://github.com/sebastianStehle/mjml-net\r\n\r\nYour library seems to be one of the fastest solution. Nice project and very clean code :)\r\n\r\n![image](https://user-images.githubusercontent.com/1236435/228608267-f3260522-fe4c-46fe-8cd5-cf58035c6197.png)\r\n\r\nYour solutions is `_HtmlReader` and _Html and _Html2 are HtmlAgilityPack and another solution. I am wondering if this project is under active development and if you consider performance improvements and/or PRs.\r\n\r\nYour library is already pretty fast, but I wonder if it can be further improved by keeping the tokens as fields (and properties) so that you an initialize names with pointers to the CharBuffer and therefore avoid a lot of allocations."}
{"hash": "cbcd7303f77b8dc35639d80b6248256857010f2e", "message": "#170 Added ToOneLineText method to IQueryCommandableExtension interface\n\nToOneLineText does no formatting but is faster.", "cs_files": ["IQueryCommandable.cs", "Program.cs", "CopyTest.cs", "ToTextTest.cs"], "prev_hash": "9c0e570477377e9f5065614f6a19d00814431a26", "repo_url": "https://github.com/mk3008/Carbunql", "repo_name": "mk3008/Carbunql", "issue_id": "170", "instance_id": "mk3008_carbunql__170__8.0", "dotnet_version": "net8.0", "image_tag": "perfbench.eval.x86_64.mk3008_carbunql__170__8.0:msbench-0.0.3", "problem_statement": "The ToText method is slow, so it's easier to call non-formatting text processing."}
{"hash": "33c36df34d1c187b837497e093e0435c9bbeba92", "message": "Improve performance of discovery/execution #2488\n\nChanges the regex that stripped out invalid XML characters to an equivalent method that will not allocate more strings unless there is an invalid character in the string. This was a performance issue for me when attempting to run a single test in a project with 20,000 tests with the VS test runner as this method took nearly 8s before (now down to < 1s with my changes).", "cs_files": ["TNode.cs", "TestXmlTests.cs"], "prev_hash": "5c550ac87546088b31dfdaaccc149e1b54f5622e", "repo_url": "https://github.com/nunit/nunit", "repo_name": "nunit/nunit", "issue_id": "2488", "instance_id": "nunit_nunit__2488__8.0", "dotnet_version": "net8.0", "image_tag": "perfbench.eval.x86_64.nunit_nunit__2488__8.0:msbench-0.0.3", "problem_statement": "@OsirisTerje commented on [Thu Sep 28 2017](https://github.com/nunit/nunit3-vs-adapter/issues/392)\n\nIt has been found that discovery of test cases are slowed down by the processing of traits. \r\n\r\n\r\n\n\n"}
{"hash": "3bc42db3a612a0fdd97aeeaf0a94d4588b088326", "message": "Fix event leak in `Multiplayer` implementation\n\nVery likely closes #29088. It's the only thing I could find odd in the\nmemory dump.", "cs_files": ["Multiplayer.cs"], "prev_hash": "60c1e0fa72530a4469fe13f63bf9b3226365d146", "repo_url": "https://github.com/ppy/osu", "repo_name": "ppy/osu", "issue_id": "29088", "instance_id": "ppy_osu__29088__8.0", "dotnet_version": "net8.0", "image_tag": "perfbench.eval.x86_64.ppy_osu__29088__8.0:msbench-0.0.3", "problem_statement": "### Type\r\n\r\nPerformance\r\n\r\n### Bug description\r\n\r\nStutters when pressing f2 or causing big jumps in beatmap selection (as in going from one end of the beatmap carousel to another) after going into spectator in a multi lobby and exiting\r\n\r\n### Screenshots or videos\r\n\r\n\r\n\r\nhttps://github.com/user-attachments/assets/f79245fc-dcde-40cb-b552-9a18671dec2d\r\n\r\n\r\n\r\n\r\nhttps://discord.com/channels/188630481301012481/1097318920991559880/1266115025031004181\r\nhttps://discord.com/channels/188630481301012481/1097318920991559880/1266112819791925391\r\n\r\n### Version\r\n\r\n2024.726.0-lazer\r\n\r\n### Logs\r\n\r\n[compressed-logs.zip](https://github.com/user-attachments/files/16383024/compressed-logs.zip)\r\n"}
{"hash": "934367783699998366b4ac872da01138b59a0395", "message": "Add SkipRecursion attribute\n\n- Avoided allocation of empty lists in TypeDetailsCache when a type has no properties to validate.\n- Fixes #8", "cs_files": ["SkipRecursionAttribute.cs", "TypeDetailsCache.cs", "Recursion.cs", "TestTypes.cs"], "prev_hash": "b10f374a2f42d02aa346f74045bffced7c67a696", "repo_url": "https://github.com/DamianEdwards/MiniValidation", "repo_name": "DamianEdwards/MiniValidation", "issue_id": "8", "instance_id": "damianedwards_minivalidation__8__6.0", "dotnet_version": "net6.0", "image_tag": "perfbench.eval.x86_64.damianedwards_minivalidation__8__6.0:msbench-0.0.3", "problem_statement": "Enable a way to decorate a complex type property so that it is skipped when doing recursive validation.\r\n\r\ne.g.\r\n\r\n``` c#\r\npublic class SampleType\r\n{\r\n    [Required]\r\n    public string Name { get; set; }\r\n\r\n    [SkipValidation]\r\n    public ChildType Child { get; set; }\r\n}\r\n\r\npublic class ChildType\r\n{\r\n    [Required]\r\n    public string Title { get; set; }\r\n}\r\n```"}
{"hash": "728b3b9fde04cd73d7d6ac8589a03c038ec146e9", "message": "Improve performance a little when reading xlsx and xslb files\n\nReleated to #618\n\nAvoid some unnecessary work in the preparing read. We can't get rid of it completely without breaking compatiblity, we need to know the column count at the very least.\n\nBefore:\n\n| Method             | Mean     | Error    | StdDev   | Gen0      | Gen1      | Gen2     | Allocated |\n|------------------- |---------:|---------:|---------:|----------:|----------:|---------:|----------:|\n| ReadSingleFileXslx | 76.74 ms | 0.964 ms | 0.902 ms | 3500.0000 |         - |        - |  37.88 MB |\n| ReadSingleFileXslb | 16.71 ms | 0.160 ms | 0.149 ms | 2031.2500 |   93.7500 |        - |  20.37 MB |\n| ReadSingleFileXls  | 18.54 ms | 0.268 ms | 0.251 ms | 4187.5000 | 1312.5000 | 906.2500 |  42.74 MB |\n\n| Method             | Mean      | Error     | StdDev    | Gen0      | Gen1     | Gen2     | Allocated |\n|------------------- |----------:|----------:|----------:|----------:|---------:|---------:|----------:|\n| OpenSingleFileXslx | 35.689 ms | 0.3813 ms | 0.3566 ms | 1500.0000 |  71.4286 |        - |  15.38 MB |\n| OpenSingleFileXslb |  6.197 ms | 0.0668 ms | 0.0592 ms |  656.2500 |  31.2500 |        - |   6.56 MB |\n| OpenSingleFileXls  |  7.859 ms | 0.0444 ms | 0.0370 ms | 1312.5000 | 437.5000 | 218.7500 |  13.49 MB |\n\nAfter:\n\n| Method             | Mean     | Error    | StdDev   | Gen0      | Gen1      | Gen2     | Allocated |\n|------------------- |---------:|---------:|---------:|----------:|----------:|---------:|----------:|\n| ReadSingleFileXslx | 58.71 ms | 1.116 ms | 1.146 ms | 2666.6667 |         - |        - |  27.13 MB |\n| ReadSingleFileXslb | 15.09 ms | 0.140 ms | 0.124 ms | 1484.3750 |   62.5000 |        - |  14.95 MB |\n| ReadSingleFileXls  | 19.23 ms | 0.158 ms | 0.148 ms | 4187.5000 | 1312.5000 | 906.2500 |  42.74 MB |\n\n| Method             | Mean      | Error     | StdDev    | Gen0      | Gen1     | Gen2     | Allocated |\n|------------------- |----------:|----------:|----------:|----------:|---------:|---------:|----------:|\n| OpenSingleFileXslx | 22.213 ms | 0.2360 ms | 0.2207 ms |  750.0000 |  62.5000 |        - |   7.75 MB |\n| OpenSingleFileXslb |  5.517 ms | 0.0686 ms | 0.0608 ms |  421.8750 |  15.6250 |        - |   4.27 MB |\n| OpenSingleFileXls  |  7.858 ms | 0.0997 ms | 0.0833 ms | 1312.5000 | 437.5000 | 218.7500 |  13.49 MB |", "cs_files": ["OpenXmlFile.cs", "ReadXmlFile.cs", "BiffWorksheetReader.cs", "XlsxWorksheet.cs", "XmlWorksheetReader.cs", "ZipWorker.cs"], "prev_hash": "a5c5dc6587f65d25960f2c5df5a33e1c4923f342", "repo_url": "https://github.com/ExcelDataReader/ExcelDataReader", "repo_name": "ExcelDataReader/ExcelDataReader", "issue_id": "618", "instance_id": "exceldatareader_exceldatareader__618__8.0", "dotnet_version": "net8.0", "image_tag": "perfbench.eval.x86_64.exceldatareader_exceldatareader__618__8.0:msbench-0.0.3", "problem_statement": "https://github.com/ExcelDataReader/ExcelDataReader/blob/2f14bd4a53186b1c99de05efe4dbee2de1fd3725/src/ExcelDataReader/Core/OpenXmlFormat/XlsxWorksheet.cs#L38-L71\r\n\r\nSo basically calling `reader.NextResult()` is contributing 50% time of my workload and allocating tons of `Cell`, `Cell[]` and boxed `double` for worksheet I even don't want to read.\r\n\r\n<details><summary>Profiler result</summary>\r\n\r\n![image](https://user-images.githubusercontent.com/10534634/202915335-9a866eec-428e-40a1-a29c-7d0509649b92.png)\r\n\r\n</details>\r\n\r\n---\r\n\r\nMaybe make those properties lazy calculated? "}
{"hash": "0aae721ff526e27928fd986caa7e353fedba3009", "message": "Improve conflicts perf #675", "cs_files": ["BaseOrchestrator.ApplyChanges.cs", "SyncRows.cs", "SqlBuilderProcedure.cs", "Program.cs"], "prev_hash": "b03f1abd8424fe9918170ec01bfaccf2a891fdaa", "repo_url": "https://github.com/Mimetis/Dotmim.Sync", "repo_name": "Mimetis/Dotmim.Sync", "issue_id": "675", "instance_id": "mimetis_dotmim.sync__675__8.0", "dotnet_version": "net8.0", "image_tag": "perfbench.eval.x86_64.mimetis_dotmim.sync__675__8.0:msbench-0.0.3", "problem_statement": "My sync process (client --> server, upload only) of about 10.000 records (in 17 tables) takes 1-2 secs. However when I insert these same 10.000 records manually and I run sync again, it's running 350 secs instead of 2 secs, when I take a look inside using the profiler the main trouble is that some loops are performed more than 32 million times! In fact it's even more, because I stopped it earlier before it's been finished. What's wrong, please?\r\n\r\n![image](https://user-images.githubusercontent.com/49657334/148213141-0f0b57c9-5b91-40f2-ae4c-04dbaf2bf174.png)\r\n"}
{"hash": "593e3ba190c1ccbea2a2f3fa407651f322a7b598", "message": "#696 Overcome `GetDevToolsSession` slowness issue for Chrome and Edge on Windows", "cs_files": ["ChromeAtataContextBuilder.cs", "ChromiumAtataContextBuilder`3.cs", "EdgeAtataContextBuilder.cs"], "prev_hash": "e2380e128f43fa6f10f6d960762ed832f406a181", "repo_url": "https://github.com/atata-framework/atata", "repo_name": "atata-framework/atata", "issue_id": "696", "instance_id": "atata-framework_atata__696__8.0", "dotnet_version": "net8.0", "image_tag": "perfbench.eval.x86_64.atata-framework_atata__696__8.0:msbench-0.0.3", "problem_statement": "There is a quite specific .NET network issue in Windows by using \"localhost\". On some machines it can take a couple of seconds (2 for example) during HTTP request to just connect to \"localhost\" which targets \"127.0.0.1\". But if you replace \"localhost\" with \"127.0.0.1\" the delay disappears. There is a long story regarding this issue. For Atata and WebDriver this issue reproduces for creating Chrome and Edge DevTools session by using WebDriver's `GetDevToolsSession()` method.\r\n\r\nIn order to overcome this issue for DevTools, we can replace \"localhost\" with \"127.0.0.1\" in \"debuggerAddress\" Chrome and Edge capability. But do that only if \"debuggerAddress\" port is obtained by IPv4."}
{"hash": "f61fe22c001f4406723dce6ad546bb8aa05264d3", "message": "PowerUp: This partialy fixes #4 but without allocating structs on the stack we will never be able to estimate their size correctly and who says that's ok ?", "cs_files": ["JITDecompiler.cs", "CSharpWatcher.cs"], "prev_hash": "2c5913979b4068ef1d2b902eaaee99e312b38c0c", "repo_url": "https://github.com/badamczewski/PowerUp", "repo_name": "badamczewski/PowerUp", "issue_id": "4", "instance_id": "badamczewski_powerup__4__8.0", "dotnet_version": "net8.0", "image_tag": "perfbench.eval.x86_64.badamczewski_powerup__4__8.0:msbench-0.0.3", "problem_statement": "Input:\r\n\r\n```\r\ninternal struct BitArray32Sized\r\n{\r\n\tprivate const int MAXBITSIZE = 32;\r\n\tprivate Int32 value;\r\n\tprivate readonly byte length;\r\n}\r\n\r\ninternal struct BitArray64Sized\r\n{\r\n    private const int MAXBITSIZE = 64;\r\n    private Int64 value;\r\n    private readonly byte length;\r\n}\r\n\r\npublic class Q { private readonly BitArray32Sized my; }\r\npublic class QQ { private readonly BitArray64Sized my; }\r\n\r\n```\r\n\r\nOutput with issues inline.\r\n```\r\n\r\n# CompilerGen+BitArray32Sized Memory Layout. \r\n# (struct sizes might be wrong since they are boxed to extract layouts) \r\nstruct CompilerGen+BitArray32Sized\r\n{\r\n    Fields:\r\n      [0-3]     System.Int32 value  (4 bytes)\r\n      [4-4]     System.Byte length  (1 bytes)\r\n      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n    Size:    5 # Estimated\r\n    Padding: 0 # Estimated\r\n}\r\n\r\n# CompilerGen+BitArray64Sized Memory Layout. \r\n# (struct sizes might be wrong since they are boxed to extract layouts) \r\nstruct CompilerGen+BitArray64Sized\r\n{\r\n    Fields:\r\n      [0-7]     System.Int64 value  (8 bytes)\r\n      [8-8]     System.Byte length  (1 bytes)\r\n      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n    Size:    9 # Estimated\r\n    Padding: 0 # Estimated\r\n}\r\n\r\n# CompilerGen+Q Memory Layout.  \r\nclass CompilerGen+Q\r\n{\r\n    Metadata:\r\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n    \u2502 [0-7]     Object Header       (8 bytes)  \u2502\r\n    \u2502 [8-15]    Method Table Ptr    (8 bytes)  \u2502\r\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n    Fields:\r\n      [16-23]   CompilerGen+BitArray32Sized my(8 bytes) // This seems correct, but then there should be padding added?\r\n    Size:    24 // This is correct, but maybe confusing if people don't know all objects have to be 24 bytes.\r\n    Padding: 0 // Shouldn't we have three bytes of padding or don't you count the padding necessary to get to 24 bytes?\r\n}\r\n\r\n# CompilerGen+QQ Memory Layout.  \r\nclass CompilerGen+QQ\r\n{\r\n    Metadata:\r\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n    \u2502 [0-7]     Object Header       (8 bytes)  \u2502\r\n    \u2502 [8-15]    Method Table Ptr    (8 bytes)  \u2502\r\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n    Fields:\r\n      [16-23]   CompilerGen+BitArray64Sized my(8 bytes)\r\n    Size:    32  // Math doesn't add up 8 + 8 + 8 = 24 so there has to be padding somewhere.\r\n    Padding: 0 // Shouldn't this have some padding?\r\n}\r\n```\r\n\r\nI guess the confusion comes from padding is necessary to get to 8 byte boundary on x64, but it seems the padding is never really shown neither in struct nor class layout."}
{"hash": "bd16322ec2653a8f347a2cc6a030b82d1a88d5fc", "message": "need to perform string parsing and formatting without depending on notation. (#7)\n\n- https://github.com/ikpil/DotRecast/issues/7\n- thank you @BasicCPPDev", "cs_files": ["ObjImporter.cs"], "prev_hash": "83752e03a14f51862e33cb26aca2475cb9ee4c22", "repo_url": "https://github.com/ikpil/DotRecast", "repo_name": "ikpil/DotRecast", "issue_id": "7", "instance_id": "ikpil_dotrecast__7__8.0", "dotnet_version": "net8.0", "image_tag": "perfbench.eval.x86_64.ikpil_dotrecast__7__8.0:msbench-0.0.3", "problem_statement": "There should be an issue with vertex/tri count i was hardly been able to load the bridge and even the bridge have poor performance.\r\n\r\nWindows 11, rtx2060 super.\r\n\r\n![img](https://i.imgur.com/9uv1M6d.png)"}
{"hash": "8f2c73761cbf00b6cbe2eba0cba103e47defbac4", "message": "Improve perf of GetTimeZoneInfo method\n\nFixes #15", "cs_files": ["TZConvert.cs", "TimeZoneInfoPerfTests.cs"], "prev_hash": "990bb739b266cbe217c458b8e394684d4bab532b", "repo_url": "https://github.com/mattjohnsonpint/TimeZoneConverter", "repo_name": "mattjohnsonpint/TimeZoneConverter", "issue_id": "15", "instance_id": "mattjohnsonpint_timezoneconverter__15__8.0", "dotnet_version": "net8.0", "image_tag": "perfbench.eval.x86_64.mattjohnsonpint_timezoneconverter__15__8.0:msbench-0.0.3", "problem_statement": "I don't know why you closed issue #14 without any fix. Do you really think this is \"hug-zone\"? No, its ISSUES section and over 13000% slower than BCL and over 54000% slower than NodaTime is performace ISSUE"}
{"hash": "2651a2c06f4ffe4d80c4767bc2d274a15c5e4925", "message": "#16 Fixed [BUG] .NET 5 keeps increasing the memory usage when using razor files", "cs_files": ["MvcCoreBuilderExtentions.cs", "RazorTemplateEngine.cs", "RazorViewToStringRendererFactory.cs"], "prev_hash": "d63d017373360da3573499b43267a7a5c82f501f", "repo_url": "https://github.com/soundaranbu/Razor.Templating.Core", "repo_name": "soundaranbu/Razor.Templating.Core", "issue_id": "16", "instance_id": "soundaranbu_razor.templating.core__16__8.0", "dotnet_version": "net8.0", "image_tag": "perfbench.eval.x86_64.soundaranbu_razor.templating.core__16__8.0:msbench-0.0.3", "problem_statement": "Rendering the razor file keeps adding to the memory. For the example I use a file that generates an output of 10MB so you see the change in memory. When returning a View() there isn't a problem but when we use the RazorTemplateEngine it keeps adding to the memory. I tried to find the problem myself but I cannot find the issue.\r\n\r\n**Test1**\r\nWhen using Test1() the memory increases but is stable afterwards. Same for every other view rendered by .NET\r\n![image](https://user-images.githubusercontent.com/2852986/108215016-1f748c00-7131-11eb-85c1-75c6e7b8cfc0.png)\r\n\r\n**Test2**\r\nWhen using Test2() the memory keeps increasing. Every snapshot is taken a after calling the test again.\r\n![image](https://user-images.githubusercontent.com/2852986/108213552-74af9e00-712f-11eb-9e43-39be2aebea23.png)\r\n\r\nand the diff of snapshot #7:\r\n![image](https://user-images.githubusercontent.com/2852986/108213909-cf48fa00-712f-11eb-995d-f28152533721.png)\r\n\r\n\r\nStartup.cs\r\n``` C#\r\npublic void ConfigureServices([NotNull] IServiceCollection services)\r\n  {\r\n    // Some code\r\n\r\n    services.AddRazorTemplating();\r\n  }\r\n```\r\n\r\n\r\nTest.cshtml\r\n``` Razor\r\n@{\r\n    Layout = null;\r\n    var array = Enumerable.Repeat(\"A\", 10000000); // 10MB string, we need to see it in memory\r\n}\r\n\r\n<div>\r\n    @string.Concat(array)\r\n</div>\r\n```\r\n\r\nTestController.cs\r\n``` C#\r\npublic class TestController : Controller {\r\n    public async Task<IActionResult> Test1()\r\n    {\r\n        return View(\"~/Views/Shared/Test.cshtml\");\r\n    }\r\n\r\n    public async Task<IActionResult> Test2()\r\n    {\r\n        var html = await RazorTemplateEngine.RenderAsync(\"~/Views/Shared/Test.cshtml\");\r\n\r\n        return Ok(\"Done\");\r\n    }\r\n}\r\n```"}
{"hash": "c4719e4283b488913553312f4bd46fc4f60e9dd3", "message": "Disable ServerHangWatchdog on Mono. Now warns instead of crashing if main thread hangs for >10 seconds, because Mono can't retrieve the stack traces from other threads. Fixes #736", "cs_files": ["ServerHangWatchdog.cs"], "prev_hash": "e8d7f05cbd1171537d11025c6a7251c77c50eb37", "repo_url": "https://github.com/tModLoader/tModLoader", "repo_name": "tModLoader/tModLoader", "issue_id": "736", "instance_id": "tmodloader_tmodloader__736__8.0", "dotnet_version": "net8.0", "image_tag": "perfbench.eval.x86_64.tmodloader_tmodloader__736__8.0:msbench-0.0.3", "problem_statement": "<!-- \r\nThe tModLoader software is provided \"as is\", without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. In no event shall the software developers be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software.\r\n\r\nPLEASE ONLY REPORT AN ISSUE IF YOU'RE CERTAIN THERE'S A PROBLEM WITH TMODLOADER\r\n\r\nPlease look at the faq. Your issue might be well known with an easy fix. https://github.com/tModLoader/tModLoader/wiki/Basic-tModLoader-Usage-FAQ \r\n\r\nIf you still need help, join our Discord chat, and read the pinned posts in #support https://tmodloader.net/discord\r\n\r\nYou are free to discard this template if you have a suggestion, but please kindly use the template to report issues with tML.\r\n-->\r\n\r\n### Description\r\n<!-- Describe your issue(s) here. What is the issue?\r\nPlease keep this as concise as possible, preferably a single line describing the issue. For example:\r\n\"When I press X button in menu Y, the component Z becomes unclickable\" -->\r\n\r\nDedicated Linux server crashes with:\r\nTerraria version: 1353\r\ntModLoader version: 0.11.5\r\n\r\nMods used:\r\n- ModLoader v0.11.5\r\n- BossChecklist v0.2.1\r\n- imkSushisMod v4.3.1\r\n- MagicStorage v0.4.3.5\r\n- RecipeBrowser v0.8.4\r\n- ThoriumMod v1.6.1.3\r\n- WingSlot v1.7.3\r\n\r\n\r\n### Log File\r\n<!-- Please attach the log file here. You'll find the log files in the logs folder. Look for client.log. \r\nWindows Logs: C:\\Documents\\My Games\\Terraria\\ModLoader\\Logs\r\nLinux Logs: ~/.local/share/Terraria/ModLoader/Logs/ or $XDG_DATA_HOME/Terraria/ModLoader/Logs/\r\nMac Logs: ~/Library/Application support/Terraria/ModLoader/Logs/  -->\r\n\r\n```\r\n[17:28:35] [1/INFO] [tML]: Starting tModLoader v0.11.5 Linux server\r\n[17:28:35] [1/INFO] [tML]: Running on Mono 4.6.1\r\n[17:28:35] [1/INFO] [tML]: Executable: /opt/terraria/tModLoaderServer.exe\r\n[17:28:35] [1/INFO] [tML]: Working Directory: /opt/terraria\r\n[17:28:35] [1/INFO] [tML]: Launch Parameters: \r\n[17:28:35] [1/WARN] [tML]: First-chance exception reporting is not implemented on Mono\r\n[17:28:35] [1/DEBUG] [tML]: Assembly Resolve: Terraria, Version=1.3.5.1, Culture=neutral, PublicKeyToken=null -> MonoMod.RuntimeDetour, Version=19.10.5.2, Culture=neutral, PublicKeyToken=null\r\n[17:28:35] [1/DEBUG] [tML]: Assembly Resolve: Terraria, Version=1.3.5.1, Culture=neutral, PublicKeyToken=null -> MonoMod.Utils, Version=19.10.5.2, Culture=neutral, PublicKeyToken=null\r\n[17:28:35] [1/DEBUG] [tML]: Assembly Resolve: MonoMod.Utils, Version=19.10.5.2, Culture=neutral, PublicKeyToken=null -> Mono.Cecil, Version=0.10.4.0, Culture=neutral, PublicKeyToken=50cebf1cceb9d05e\r\n[17:28:35] [1/DEBUG] [tML]: Assembly Resolve: Terraria, Version=1.3.5.1, Culture=neutral, PublicKeyToken=null -> Newtonsoft.Json, Version=10.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed\r\n[17:28:36] [1/DEBUG] [tML]: Assembly Resolve: Terraria, Version=1.3.5.1, Culture=neutral, PublicKeyToken=null -> Ionic.Zip.Reduced, Version=1.9.1.8, Culture=neutral, PublicKeyToken=edbe51ad942a3f5c\r\n[17:28:36] [1/DEBUG] [tML]: Hook IL.Ionic.Zip.ZipEntry::ValidateOutput(string, Stream, out string) modified by Terraria\r\n[17:28:38] [1/INFO] [tML]: Finding Mods...\r\n[17:28:39] [1/INFO] [tML]: Sandboxing: BossChecklist\r\n[17:28:40] [1/INFO] [tML]: Sandboxing: imkSushisMod\r\n[17:28:40] [1/INFO] [tML]: Sandboxing: MagicStorage\r\n[17:28:40] [1/DEBUG] [tML]: Assembly Resolve: Terraria, Version=1.3.5.1, Culture=neutral, PublicKeyToken=null -> Mono.Cecil.Mdb, Version=0.10.4.0, Culture=neutral, PublicKeyToken=50cebf1cceb9d05e\r\n[17:28:40] [1/INFO] [tML]: Sandboxing: RecipeBrowser\r\n[17:28:40] [1/INFO] [tML]: Sandboxing: ThoriumMod\r\n[17:28:41] [1/INFO] [tML]: Sandboxing: WingSlot\r\n[17:28:41] [1/INFO] [tML]: Instantiating Mods...\r\n[17:28:41] [1/DEBUG] [tML]: Assembly Resolve: ThoriumMod_0, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null -> System.ValueTuple, Version=4.0.3.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\n[17:28:41] [1/INFO] [tML]: Initializing: ModLoader v0.11.5\r\n[17:28:42] [1/INFO] [tML]: Initializing: BossChecklist v0.2.1\r\n[17:28:42] [1/INFO] [tML]: Initializing: imkSushisMod v4.3.1\r\n[17:28:42] [1/INFO] [tML]: Initializing: MagicStorage v0.4.3.5\r\n[17:28:42] [1/INFO] [tML]: Initializing: RecipeBrowser v0.8.4\r\n[17:28:42] [1/DEBUG] [tML]: Assembly Resolve: RecipeBrowser_0, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null -> TerrariaHooks, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\r\n[17:28:42] [1/DEBUG] [tML]: Assembly Resolve: TerrariaHooks, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null -> MonoMod.RuntimeDetour, Version=19.4.13.1, Culture=neutral, PublicKeyToken=null\r\n[17:28:42] [1/WARN] [tML]: Upgraded Reference MonoMod.RuntimeDetour -> Version=19.4.13.1 -> 19.10.5.2\r\n[17:28:42] [1/DEBUG] [tML]: Hook On.Terraria.Player::AdjTiles() added by RecipeBrowser_0\r\n[17:28:42] [1/INFO] [tML]: Initializing: ThoriumMod v1.6.1.3\r\n[17:28:44] [1/DEBUG] [tML]: Hook On.Terraria.Player::ApplyDamageToNPC(NPC, int, float, int, bool) added by ThoriumMod_0\r\n[17:28:44] [1/INFO] [tML]: Initializing: WingSlot v1.7.3\r\n[17:28:44] [1/INFO] [tML]: Setting up...\r\n[17:28:44] [1/INFO] [tML]: Loading: ModLoader v0.11.5\r\n[17:28:44] [1/INFO] [tML]: Loading: BossChecklist v0.2.1\r\n[17:28:44] [1/INFO] [tML]: Loading: imkSushisMod v4.3.1\r\n[17:28:44] [1/INFO] [tML]: Loading: MagicStorage v0.4.3.5\r\n[17:28:44] [1/INFO] [tML]: Loading: RecipeBrowser v0.8.4\r\n[17:28:44] [1/INFO] [tML]: Loading: ThoriumMod v1.6.1.3\r\n[17:28:47] [1/INFO] [tML]: Loading: WingSlot v1.7.3\r\n[17:28:48] [1/INFO] [tML]: Adding Recipes...\r\n[17:29:30] [Threadpool worker/INFO] [Terraria]: Loading World: Test, IsCloud=False\r\n[17:29:31] [Threadpool worker/INFO] [StatusText]: Resetting game objects\r\n[17:29:33] [Threadpool worker/INFO] [StatusText]: Loading world data\r\n[17:29:33] [Threadpool worker/INFO] [StatusText]: Settling liquids\r\n[17:29:35] [1/INFO] [Terraria]: Running one update...\r\n[17:29:35] [1/INFO] [tML]: Server starting with AllowVanillaClients set to False\r\n[17:29:35] [1/DEBUG] [tML]: Fallback synchronization context assigned\r\n[17:29:39] [1/INFO] [Terraria]: Listening on port 7777\r\n[17:29:44] [Threadpool worker/DEBUG] [tML]: Assembly Resolve: Terraria, Version=1.3.5.1, Culture=neutral, PublicKeyToken=null -> Steamworks.NET, Version=9.1.0.0, Culture=neutral, PublicKeyToken=null\r\n[17:29:44] [Threadpool worker/DEBUG] [tML]: Assembly Resolve: Terraria, Version=1.3.5.1, Culture=neutral, PublicKeyToken=null -> MP3Sharp, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\r\n[17:29:44] [Threadpool worker/DEBUG] [tML]: Assembly Resolve: Terraria, Version=1.3.5.1, Culture=neutral, PublicKeyToken=null -> NVorbis, Version=0.8.4.0, Culture=neutral, PublicKeyToken=null\r\n[17:29:46] [Threadpool worker/INFO] [Terraria]: JIT loading finished\r\n[17:29:50] [Threadpool worker/INFO] [Terraria]: 192.168.0.26:51926 is connecting...\r\n[17:31:16] [Server Hang Watchdog/ERROR] [tML]: Unhandled Exception\r\nSystem.NotImplementedException: The method or operation is not implemented.\r\n  at System.Diagnostics.StackTrace..ctor (Thread targetThread, Boolean needFileInfo) [0x0001a] in mscorlib.dll \r\n  at Terraria.ModLoader.Engine.ServerHangWatchdog.GetStackTrace (Thread targetThread) [0x00061] in tModLoaderServer.exe \r\n  at Terraria.ModLoader.Engine.ServerHangWatchdog.Run (Thread mainThread) [0x0002c] in tModLoaderServer.exe \r\n  at Terraria.ModLoader.Engine.ServerHangWatchdog+<>c__DisplayClass3_0.<Start>b__0 () [0x00000] in tModLoaderServer.exe \r\n  at System.Threading.ThreadHelper.ThreadStart_Context (Object state) [0x00017] in mscorlib.dll \r\n  at System.Threading.ExecutionContext.RunInternal (ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) [0x0008d] in mscorlib.dll \r\n  at System.Threading.ExecutionContext.Run (ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) [0x00000] in mscorlib.dll \r\n  at System.Threading.ExecutionContext.Run (ExecutionContext executionContext, ContextCallback callback, Object state) [0x00031] in mscorlib.dll \r\n  at System.Threading.ThreadHelper.ThreadStart () [0x0000b] in mscorlib.dll \r\n```\r\n\r\n### Steps to Reproduce\r\n<!-- Please describe the steps to reproduce this issue -->\r\n\r\n1. Extract Terraria server\r\n2. Copy tModLoader files into the Terraria server directory\r\n3. Install the mods listed above\r\n4. Run with `sudo su terraria -c ./tModLoaderServer.bin.x86_64`\r\n5. Have a client connect to the server (sometimes the client can see the map, sometimes it crashes before then)\r\n\r\n### Expected behavior \r\n<!-- What should be happening? If you don't know, leave what you think should happen -->\r\nIt shouldn't crash :) \r\n\r\n### Actual behavior\r\n<!-- What is actually happening? -->\r\nIt crashes :(\r\n\r\n### Reproduction frequency\r\n<!-- How often are you reliably able to reproduce this issue? -->\r\nEvery time I start the server and a client connects, the server crashes\r\n\r\n### Additional Information\r\n<!-- Any additional information, configuration or data that might be necessary to reproduce the issue. -->\r\nI also tried running with mono: `sudo su terraria -c \"mono tModLoaderServer.exe\"`, but have the same error.\r\n\r\nI am running Debian 9\r\n\r\nI also tried without `su`, explicitly logging in as the `terraria` user. Still no dice\r\n\r\nUpdate: I tried disabling all mods, and am still getting the same error"}
{"hash": "40eb3d9214cd3376cfd39f89f8ba894898e911fe", "message": "Fix memory/performance leak on reload (#3035)", "cs_files": ["LoaderUtils.cs"], "prev_hash": "048567ff43470dfa43022e9182eb9ff15b7e4fcd", "repo_url": "https://github.com/tModLoader/tModLoader", "repo_name": "tModLoader/tModLoader", "issue_id": "3035", "instance_id": "tmodloader_tmodloader__3035__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.tmodloader_tmodloader__3035__9.0:msbench-0.0.3", "problem_statement": "### Version\r\n\r\nLatest 1.4-stable\r\n\r\n### OS\r\n\r\nWindows\r\n\r\n### Platform\r\n\r\nSteam\r\n\r\n### This bug affects\r\n\r\nGameplay as a Player\r\n\r\n### Description\r\n\r\n**Tested on both stable and preview, same behavior**\r\n\r\nAfter about 15 (forced) mod reloads, the game starts to hang at the \"Unloading tModLoader v2022.XXX\" step for several seconds, with task manager showing drastic increases of memory usage on dotnet.exe, which presist after a mod reload.\r\n\r\n### Log File\r\n\r\nNothing peculiar in the log.\r\n\r\n### Steps to reproduce\r\n\r\n1 Make sure enabled.json is empty, to eliminate mods causing this\r\n2. open task manager to monitor dotnet.exe memory usage\r\n3. start the game\r\n4. go to workshop, mods, forced reload, repeat 15 times (or until you notice slowdowns/memory increase)\r\n5. the game stays progressively longer on \"Unloading tModLoader\" step, with memory visibly increasing\r\n6. This effect gets exponentially worse with subsequent reloads to the point where the game hangs for 30+ seconds and/or memory is in the 4+ GB\r\n\r\n### Expected Behavior\r\n\r\nReloads should not cause a memory leak\r\n\r\n### Actual Behavior\r\n\r\nReload causes a memory leak\r\n\r\n### Reproduction frequency\r\n\r\n100%.\r\n\r\n### Additional Information\r\n\r\n This is not a clean/fresh computer so I have mods in my workshop/Mods folders, meaning they (try to) get displayed in the Mods menu where I go to every time I want to reload mods, maybe it has something to do with that. I have not tested it with 0 \"existing\" mods\r\n\r\nAfter running the game through a blank mod in VS, and testing this, I found that this is the culprit, it keeps multiplying this count every reload:\r\n![Screenshot_6](https://user-images.githubusercontent.com/15894498/195917248-6f81575b-bfc1-4352-bb3a-bec3dc46327b.png)\r\n![Screenshot_7](https://user-images.githubusercontent.com/15894498/195917776-3714a79e-8639-48e1-bdd1-6c35f84a6648.png)\r\n![Screenshot_8](https://user-images.githubusercontent.com/15894498/195917794-5ed05754-f089-40f6-bbb4-ab71815199da.png)\r\n"}
{"hash": "9a434101cbc3d09329b39d10e8a1ac385005ed88", "message": "#287 Fix client hang with NoSync mods that only exist on server.\nProvide a way for clients to know if a NoSync mod exists on the server.", "cs_files": ["Mod.cs", "ModNet.cs"], "prev_hash": "df2262d116395aa292092612a83affa7a72431fe", "repo_url": "https://github.com/tModLoader/tModLoader", "repo_name": "tModLoader/tModLoader", "issue_id": "287", "instance_id": "tmodloader_tmodloader__287__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.tmodloader_tmodloader__287__9.0:msbench-0.0.3", "problem_statement": "### Description\r\n\r\nWhen you have `side = NoSync` in `Build.txt` you will get stuck on syncing mods if the mod is enabled on the server but not on the client.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create new mod with empty Mod class.\r\n2. Add `side = NoSync` in `Build.txt`\r\n3. Enable mod on server and start world.\r\n4. Disable mod on client and try to enter server.\r\n\r\n### Expected behavior \r\n\r\nIt should connect.\r\n\r\n### Actual behavior\r\n\r\nIt gets stuck on syncing mods.\r\n\r\n### Reproduction frequency\r\n\r\nAll the time.\r\n\r\n### Versions\r\n\r\nLatest (0.10.1.1).\r\n\r\n### Mods\r\n\r\nOnly the empty mod with `side = NoSync`\r\n\r\n### Additional Information\r\n\r\n  @Chicken-Bones \r\nSee comment in below code.\r\n`ModNet.cs`\r\n```\r\ninternal static bool HijackGetData(ref byte messageType, ref BinaryReader reader, int playerNumber)\r\n{\r\n\tif (netMods == null)\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\r\n\tbool hijacked = false;\r\n\tlong readerPos = reader.BaseStream.Position;\r\n\tlong biggestReaderPos = readerPos;\r\n\tforeach (var mod in netMods)\r\n\t{\r\n                //constantly throws nullreferenceexception on this if because mod == null\r\n\t\tif (mod.HijackGetData(ref messageType, ref reader, playerNumber))\r\n\t\t{\r\n\t\t\thijacked = true;\r\n\t\t\tbiggestReaderPos = Math.Max(reader.BaseStream.Position, biggestReaderPos);\r\n\t\t}\r\n\t\treader.BaseStream.Position = readerPos;\r\n\t}\r\n\tif (hijacked)\r\n\t{\r\n\t\treader.BaseStream.Position = biggestReaderPos;\r\n\t}\r\n\treturn hijacked;\r\n}"}
{"hash": "f3731475c3d57202e6cfff2fa120712044c25742", "message": "Use HashSets for better perf\n\nFixes #27", "cs_files": ["TZConvert.cs"], "prev_hash": "26fb85022f1fdb9bb9d0d249a1db7775ec86f99d", "repo_url": "https://github.com/mattjohnsonpint/TimeZoneConverter", "repo_name": "mattjohnsonpint/TimeZoneConverter", "issue_id": "27", "instance_id": "mattjohnsonpint_timezoneconverter__27__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.mattjohnsonpint_timezoneconverter__27__9.0:msbench-0.0.3", "problem_statement": "`KnownIanaTimeZoneNames`, `KnownWindowsTimeZoneIds`, and `KnownRailsTimeZoneNames` are all exposed as `ICollection<T>`, which is fine.  However their implementations are just arrays/lists and should all be `HashSet<T>` for better perf."}
{"hash": "17187282d2ddd356c0195802253513428d3087b4", "message": "#101 Fix command execution delay of WebDriver for .NET Core 2.0", "cs_files": ["MultiDriverTests.cs", "UITestFixture.cs", "DriverAtataContextBuilder`1.cs"], "prev_hash": "bf4d764b6110bc5a738bcca95876d4bd5f8fe2e5", "repo_url": "https://github.com/atata-framework/atata", "repo_name": "atata-framework/atata", "issue_id": "101", "instance_id": "atata-framework_atata__101__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.atata-framework_atata__101__9.0:msbench-0.0.3", "problem_statement": "There is a bug in Selenium.WebDriver v3.6.0 for .NET Core 2.0: each WebDriver request takes extra 1 second. It reproduces for Chrome, Firefox, etc.\r\n\r\nLink to the bug: https://github.com/dotnet/corefx/issues/24104.\r\n\r\n## Fix\r\n\r\nAdd method to `DriverAtataContextBuilder<TBuilder>`:\r\n\r\n```cs\r\npublic TBuilder WithFixOfCommandExecutionDelay();\r\n```\r\nThe fix does: finds `HttpCommandExecutor` instance of `RemoteWebDriver` instance and updates its `remoteServerUri` field by replacing `\"locahost\"` with `\"127.0.0.1\"`.\r\n\r\n## Usage\r\n\r\n```cs\r\nAtataContext.Configure().\r\n    UseChrome().\r\n        WithFixOfCommandExecutionDelay().\r\n```"}
{"hash": "a7525fbb646b495c8a8037cb46990ef7dd9bf86a", "message": "resolving some perf / leaks issues in JsonConverter. #154", "cs_files": ["BaseConverter.cs", "BinaryConverter.cs", "DmBinaryConverter.cs", "JsonConverter.cs", "SqlServerBasicTests.cs", "SqlServerConfigTests.cs", "BinaryConvertTests.cs"], "prev_hash": "d8ef461fc8e3c9f1821e8760f59f2d781e5d5b00", "repo_url": "https://github.com/Mimetis/Dotmim.Sync", "repo_name": "Mimetis/Dotmim.Sync", "issue_id": "154", "instance_id": "mimetis_dotmim.sync__154__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.mimetis_dotmim.sync__154__9.0:msbench-0.0.3", "problem_statement": "I just saw that the `JsonConverter` is implemented in an non-optimal manner: by first deserializing the json stream into a string and then parsing the string.\r\nThis creates quite a GC overhead which is bad for both, the ASP.NET webserver and Xamarin apps, as these are quire memory constrainted.\r\n\r\nEspecially on Xamarin.Andoid, the garbage collector is very slow.\r\nNewtonSoft Json has its own article since version 5 about this topic \"optimizing memory usage\": https://www.newtonsoft.com/json/help/html/Performance.htm \r\n\r\nMoreover, you do not dispose the MemoryStream at all! So this is quite some serious **memory leak**\r\n\r\nOur approach:\r\n```\r\n    using Newtonsoft.Json;\r\n    using System.IO;\r\n    \r\n    namespace Dotmim.Sync.Serialization\r\n    {\r\n        public class JsonConverter<T> : BaseConverter<T>\r\n        {\r\n            public override T Deserialize(Stream ms)\r\n            {\r\n                using (StreamReader sr = new StreamReader(ms))\r\n                using (JsonReader reader = new JsonTextReader(sr))\r\n                {\r\n                    JsonSerializer serializer = new JsonSerializer();\r\n                    return serializer.Deserialize<T>(reader);\r\n                }\r\n            }\r\n    \r\n            public override void Serialize(T obj, Stream ms)\r\n            {\r\n                using (var writer = new StreamWriter(ms))\r\n                using (var jsonWriter = new JsonTextWriter(writer))\r\n                {\r\n                    var serializer = new JsonSerializer();\r\n                    serializer.Serialize(jsonWriter, obj);\r\n                }\r\n            }\r\n    \r\n            public override byte[] Serialize(T obj)\r\n            {\r\n                using (MemoryStream ms = new MemoryStream())\r\n                {\r\n                    Serialize(obj, ms);\r\n                    return ms.ToArray();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n```"}
{"hash": "5c9730179832f78881d8bef41c4352d258a87a4b", "message": "Improving sqlite perfs on first sync. Fix #523\nGo for `v0.7.4`", "cs_files": ["DbCommandType.cs", "DbSyncAdapter.cs", "BaseOrchestrator.ApplyChanges.cs", "BaseOrchestrator.cs", "MySqlSyncAdapter.cs", "SqlSyncAdapter.cs", "SQLiteObjectNames.cs", "SqliteTableBuilder.cs", "SQLiteSyncAdapter.cs"], "prev_hash": "4970e34fd838e5ecb136ad3861e5d43e80862716", "repo_url": "https://github.com/Mimetis/Dotmim.Sync", "repo_name": "Mimetis/Dotmim.Sync", "issue_id": "523", "instance_id": "mimetis_dotmim.sync__523__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.mimetis_dotmim.sync__523__9.0:msbench-0.0.3", "problem_statement": "Testing with a ~500mb SQLite database, legacy data is upgraded to SQLite. The SQLite db is synced to SQL Server using DMS over https.\r\n\r\nAt the end of the initial sync a snapshot is created on the server.\r\n\r\nWe find the initial sync of server data back to another device is quite slow. DMS takes around 1 hour 15mins to sync that server data to a new SQLite database.\r\n\r\nThe app we have in production, not using DMS, takes 15-20mins to sync to a new device with the same test data.\r\n\r\nWe test on a very fast internet connection. Most of our customers have slower, less reliable internet.\r\n\r\n[Download snapshot is not resilient to connection interruption #470](https://github.com/Mimetis/Dotmim.Sync/issues/470) introduced retry logic. That is most appreciated. But if we do go live with DMS, our customers will notice how much slower it is to add our app to a new device.\r\n\r\nThe issue does not seem to be related to indexes as the snapshot is already created. The server we use for testing now appears to have sufficient resources. We use batch size=2000 as I assume a smaller batch size is more resilient.\r\n\r\nIs there anything else we can do, or DMS can do to reduce the time DMS takes to sync to a new device?\r\n\r\n"}
{"hash": "08e8c2e119949a0a2dd02ed001d9a91a537a913a", "message": "Removing cache for TableBuilder and ScopeBuilder since it can conflicts when Upgrade schema\nResolving issue #437\nAdd more Tests checking on rows count", "cs_files": ["MessageApplyChanges.cs", "BaseOrchestrator.ApplyChanges.cs", "BaseOrchestrator.Migration.cs", "BaseOrchestrator.cs", "LocalOrchestrator.cs", "RemoteOrchestrator.cs", "SyncAgent.cs", "SqlDbMetadata.cs", "MariaDBHttpTests.cs", "MariaDBTcpConflictsTests.cs", "MariaDBTcpTests.cs", "MySqlHttpTests.cs", "MySqlTcpConflictsTests.cs", "MySqlTcpTests.cs", "SqlServerHttpTests.cs", "SqlServerTcpConflictsTests.cs", "SqlServerTcpTests.cs", "SqlServerToSqliteTransactionTests.cs", "SqlServerChangeTrackingTcpTests.cs", "AdventureWorksContext.cs", "Log.cs", "TcpTests.cs"], "prev_hash": "bd353fd43f0ce244bd0e006ff8825c174c4fa12c", "repo_url": "https://github.com/Mimetis/Dotmim.Sync", "repo_name": "Mimetis/Dotmim.Sync", "issue_id": "437", "instance_id": "mimetis_dotmim.sync__437__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.mimetis_dotmim.sync__437__9.0:msbench-0.0.3", "problem_statement": "DMS version: 0.6.1-beta-0511\r\nServer: SQLServer\r\nLocal: SQLite console app\r\nTable count: 40\r\nTotal rows: cca 140.000\r\n\r\nReinit from snapshot results some empty table and duration is longer than reinit without snapshot.\r\nReinit without snapshot works fine.\r\nReinit from snapshot using version 0.6.0 works fine."}
{"hash": "3810fbbf20ade370aa8bb945ddf4450a5798266f", "message": "Throw if compound document contains sector chains with cycles. Fixes #382", "cs_files": ["CompoundDocument.cs", "Errors.cs", "Configuration.cs", "ExcelBinaryReaderTest.cs"], "prev_hash": "a0b54c4ec3f8bdb0eb9d65cf2888d08d57919ff7", "repo_url": "https://github.com/ExcelDataReader/ExcelDataReader", "repo_name": "ExcelDataReader/ExcelDataReader", "issue_id": "382", "instance_id": "exceldatareader_exceldatareader__382__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.exceldatareader_exceldatareader__382__9.0:msbench-0.0.3", "problem_statement": "**ExcelReaderFactory.CreateBinaryReader** throws **OutOfMemoryException** after trying to open a 26KB invalid Excel file for more than 25s. The file can be found in the [attached archive]. You can run the following code to reproduce it (the **path** variable should contain the path to the extracted file):\r\n\r\n```csharp\r\nEncoding.RegisterProvider(CodePagesEncodingProvider.Instance);\r\n\r\nusing (var file = File.OpenRead(path))\r\n{\r\n  ExcelReaderFactory.CreateBinaryReader(file);\r\n}\r\n```\r\n\r\nFound via [SharpFuzz].\r\n\r\n[attached archive]: https://github.com/ExcelDataReader/ExcelDataReader/files/2708805/OutOfMemoryException.zip\r\n[SharpFuzz]: https://github.com/Metalnem/sharpfuzz\r\n"}
{"hash": "e87123342cab2004c7baea09310a1ddf83b6b547", "message": "Load results pages asynchronously\n\nReduces performance burden when first displaying pages. Closes #4977.", "cs_files": ["Results.cs"], "prev_hash": "2b768bef96e28f438116f9458ce61130e76c17a5", "repo_url": "https://github.com/ppy/osu", "repo_name": "ppy/osu", "issue_id": "4977", "instance_id": "ppy_osu__4977__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.ppy_osu__4977__9.0:msbench-0.0.3", "problem_statement": "**Describe the bug:** \r\n\r\nAfter finishing map, the game freezes before showing the score results.\r\n\r\n**osu!lazer version:** \r\nrevision 164b05abd6debb5b817d2f47620e593c006a24b2\r\n\r\n**Logs:** \r\n[performance.log](https://github.com/ppy/osu/files/3269871/performance.log)\r\n[runtime.log](https://github.com/ppy/osu/files/3269872/runtime.log)\r\n"}
{"hash": "569029076c73fb6e73bc30048bd399e8e8c0af3b", "message": "Reverse iteration in TryRemove\n\nImproves the performance of large collections with\nmany equivalent elements by minimising the shifting\nof elements within _missingItems.\n\nRelates to #2598", "cs_files": ["CollectionTally.cs"], "prev_hash": "bdcc00ab6a66e6b51e14e79b81d193e9314df2ce", "repo_url": "https://github.com/nunit/nunit", "repo_name": "nunit/nunit", "issue_id": "2598", "instance_id": "nunit_nunit__2598__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.nunit_nunit__2598__9.0:msbench-0.0.3", "problem_statement": "Just updated my tests from NUnit 2.4.8 to 3.9.0 and noticed that tests have started running too long.\r\nAnd here is a synthetic test with allows me to reproduce the problem:\r\n\r\n```csharp\r\n[Test]\r\npublic void TestEquivalent()\r\n{\r\n\tbyte[] data = new byte[0x80000 + 7];\r\n\tbyte[] encrypted = new byte[0x80000 + 7];\r\n\tencrypted[0] = 2;\r\n\tencrypted[1] = 3;\r\n\r\n\tvar watch = Stopwatch.StartNew();\r\n\tAssert.That(encrypted, Is.Not.EquivalentTo(data));\r\n\twatch.Stop();\r\n\tDebug.WriteLine($\"Takes: {watch.ElapsedMilliseconds} milliseconds\");\r\n}\r\n```\r\n\r\nIt used to work fast (with version 2.4.8), but now it takes 123116 milliseconds to run on my computer. In real test when two arrays contain completely different values, it takes about 22 minutes to run. Any idea why is it so?\r\n"}
{"hash": "1f1cad0ad828b718e73e209cdb06238ff94405d7", "message": "Simple fix for #1555", "cs_files": ["Constraint.cs"], "prev_hash": "83ec52b5b854018b2b178f641173e5d0226f8cd8", "repo_url": "https://github.com/nunit/nunit", "repo_name": "nunit/nunit", "issue_id": "1555", "instance_id": "nunit_nunit__1555__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.nunit_nunit__1555__9.0:msbench-0.0.3", "problem_statement": "This is really due to a CoreCLR issue (which I've [filed](https://github.com/dotnet/coreclr/issues/5612)) but the constructor for [`Constraint`](https://github.com/nunit/nunit/blob/master/src/NUnitFramework/framework/Constraints/Constraint.cs) performs three `EndsWith` checks:\n\n```\nDisplayName = this.GetType().Name;\nif (DisplayName.EndsWith(\"`1\") || DisplayName.EndsWith(\"`2\"))\n    DisplayName = DisplayName.Substring(0, DisplayName.Length - 2);\nif (DisplayName.EndsWith(\"Constraint\"))\n    DisplayName = DisplayName.Substring(0, DisplayName.Length - 10);\n```\n\nThat's nice and quick when the current culture is en-US and the invariant culture, but slow as molasses under other cultures. When pretty much every assertion (as far as I can see) creates a new constraint, that's far from ideal.\n\nFirstly, given that this is going to be a fixed value per constraint type anyway, I wonder whether it would make sense to cache this or let the caller pass it in - but even if the code is broadly kept the same, just changing this to use `EndsWith(..., StringComparison.Ordinal)` would make it even faster than the en-US codepath.\n"}
{"hash": "60fa1254c2629ce20916c0e0c298fffb918399fb", "message": "#174 CommandText generation processing was prioritized for performance.\n\nConventionally, a formatted string was assigned, but in order to prioritize performance, the specification was changed to assign an unformatted string.\nIf you want to assign a formatted string like before, specify Decoration in the Type property of the Formatter class.", "cs_files": ["Formatter.cs", "IDbConnectionExtension.cs", "ToTextTest.cs"], "prev_hash": "762ad7016dfce8ff54844590e74db6a82a465493", "repo_url": "https://github.com/mk3008/Carbunql", "repo_name": "mk3008/Carbunql", "issue_id": "174", "instance_id": "mk3008_carbunql__174__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.mk3008_carbunql__174__9.0:msbench-0.0.3", "problem_statement": "Formatting process is performed in query string generation process.\r\nGood for debugging, but also impacts performance at runtime.\r\nI want to prepare a selection that can be output without formatting.\r\n\r\nThe default is a format that prioritizes performance."}
{"hash": "5722b8eec0c914335b8f2a3b7f50583c91fa81ad", "message": "Separate large data writing in multiple chunks to avoid out of memory exception. Fixes #363", "cs_files": ["DicomWriteOptions.cs", "DicomWriter.cs", "DicomFileTest.cs"], "prev_hash": "15e3199ebc0b7296d57b3c42c6b5908a0e9c5db7", "repo_url": "https://github.com/fo-dicom/fo-dicom", "repo_name": "fo-dicom/fo-dicom", "issue_id": "363", "instance_id": "fo-dicom_fo-dicom__363__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.fo-dicom_fo-dicom__363__9.0:msbench-0.0.3", "problem_statement": "Hi so i've been trying to edit each frame in a large Ultrasound DICOM file and save it to back to the hard drive. But i consistently get a SystemOutOfMemory Exception everytime i try and save the file with DicomFile.save() method. My code is below. My Ultrasound image is about 700MB but i'll need to edit larger Ultrasound Dicom Files so would be really helpful if anyone could assist in this. Thanks\n\n```\n//get first frame size            \nDicomDataset newDataset = new DicomDataset();\ndcmImage.Dataset.CopyTo(newDataset);\nDicomPixelData pixelData = DicomPixelData.Create(newDataset, true);\n//edits each frame in the DICOM image object\n            for (int i = 1; i < dcmImage.NumberOfFrames; i++)\n            {                \n                int rows, columns;\n                var frame = RenderBitmapSourceToBitmap(dcmImage.RenderImage(i).AsWriteableBitmap());\n                frame = GetValidImage(frame);\n\n                //Draws each masked region on the current frame\n                foreach (Rectangle maskRegion in maskRegions)\n                {\n                    Point position = new Point(Canvas.GetLeft(maskRegion), Canvas.GetTop(maskRegion));\n                    frame = drawMaskOnImage(maskRegion, position, frame, imgCtrl);\n                }\n\n                // converts frame to byte array and writes it back to PixelData stream object\n                byte[] pixels = GetPixels(frame, out rows, out columns);\n                newDataset.Add(DicomTag.Rows, (ushort)rows);\n                newDataset.Add(DicomTag.Columns, (ushort)columns);\n                System.Drawing.ImageConverter converter = new System.Drawing.ImageConverter();\n                MemoryByteBuffer buffer = new MemoryByteBuffer(pixels);\n                pixelData.AddFrame(buffer);\n\n                GC.Collect();\n            }\nDicomFile dicomfile = new DicomFile(newDataset);\ndicomfile.Save(outputFolder + @\"\\\" + outputFileName + \".dcm\");\n\n```\n### fo-dicom version and OS/platform\n\nLatest Version from NuGet on Windows 7\n"}
{"hash": "3ea26064e715e393a3251db8e56caf5bd06590f5", "message": "fix freeze on parsing SQ tag of length 0 (#1009)", "cs_files": ["DicomReader.cs", "DicomReaderTest.cs"], "prev_hash": "ebb22653d108725c85cbe83037f686dec7db20e7", "repo_url": "https://github.com/fo-dicom/fo-dicom", "repo_name": "fo-dicom/fo-dicom", "issue_id": "1009", "instance_id": "fo-dicom_fo-dicom__1009__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.fo-dicom_fo-dicom__1009__9.0:msbench-0.0.3", "problem_statement": "###\r\n[FreezePattern.zip](https://github.com/fo-dicom/fo-dicom/files/4453781/FreezePattern.zip)\r\n\r\n Expected behavior\r\nThe DICOM file can be read normally, or an Exception error occurs.\r\n\r\n### Actual behavior\r\nFreeze when reading a file with DicomFile.Open that contains an SQ tag of length 0.The so-called infinite loop.\r\n\r\n### Steps to reproduce the behavior\r\nThe cause is the ParseValue method of the fo-dicom\\DICOM\\IO\\Reader\\DicomReader.cs.\r\nIf the value of source.Position does not change, you will be in an infinite loop, because it is a VR tag and the length is explicitly defined as 0.\r\nExample Dicom File is Uploaed(FreezePattern.zip)\r\n\r\n### fo-dicom version and OS/platform\r\nWindow 10 Ver.1909\r\n.Net Framework 4.6.1"}
{"hash": "9ecda7aff09dd487bec9fc1bfd5f5b5edfc958f8", "message": "Made unit test more reliably completing. Issue #605", "cs_files": ["DicomClientTest.cs"], "prev_hash": "9a9b3a5e9e3691d103d5bf83a1fc5fbb05db59f1", "repo_url": "https://github.com/fo-dicom/fo-dicom", "repo_name": "fo-dicom/fo-dicom", "issue_id": "605", "instance_id": "fo-dicom_fo-dicom__605__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.fo-dicom_fo-dicom__605__9.0:msbench-0.0.3", "problem_statement": "The method `DicomClient.WaitForAssociation` is primarily a remnant from the pre-`async`/`await` era, and does not fit it very well in the current asynchronous workflow for `DicomClient`. In particular, the method does not initiate an association request, so if the method is called *before* `DicomClient.Send{Async}`, the wait will always fail. Calling `WaitForAssociation` after `Send` is also pointless; `Send` completes all communication with the server before it returns.\r\n\r\nTo more efficiently monitor association status in the `async`/`await` context, it is therefore suggested that two events are added to `DicomClient`, `AssociationSucceeded` and `AssociationFailed`, and that the `WaitForAssociation` method is declared `Obsolete`."}
{"hash": "1cb59b1350272ec272e8041db49f30f4f1679ce4", "message": "- fixes #1631 NestSerializer performance problems (don't need to create a new serializer instance per call to Serialize/Deserialize methods)", "cs_files": ["NestSerializer.cs"], "prev_hash": "a5903b046410cbdccb58165fc8f173cd675c32bf", "repo_url": "https://github.com/elastic/elasticsearch-net", "repo_name": "elastic/elasticsearch-net", "issue_id": "1631", "instance_id": "elastic_elasticsearch-net__1631__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.elastic_elasticsearch-net__1631__9.0:msbench-0.0.3", "problem_statement": "Sorry guys about that, but I may be reporting more stuff, because I'm evaluating upgrade to 2.0.\nMay help you with some stuff if I have time.\nIf you feel that's 2.0 branch is not in a state to report issues related to it just let me know and I'll stop =]\n\nTesting with bulk index request (IndexMany).\n2000 objects in a bulk (30 short fields on average per object).\n\n**Used to take less than a second** with ES being the bottleneck but **now it takes about 20-25 seconds** where almost all the time the code is executing is on the client server serializing the request.\nComparing 2.0 (ES & Nest) vs 1.7 (ES & Nest)\n\nMade some performance analysis with VS and it seems CPU hot paths mostly include\nNewtonsoft.Json and **ElasticContractResolver**.\n\nTried with release build but no improvements.\n"}
{"hash": "1d6af813e644cf1cc992e5ed8b61dbf4c2b5fff4", "message": "Fix performance issues with CA3075\n\n1. Get rid of the expensive `GetDeclaredOrReferencedSymbol` syntax node extension method\n2. Avoid invocations to GetSemanticModel and GetSymbolInfo in the analyzer\n\nEventually the analyzer should be rewritten as a flow-analysis analyzer based on PropertySetAnalysis, but I'll let @dotpaul get to it whenever he gets time. This PR removes the major performance issues with the existing implementation\n\nAddresses part of #2576", "cs_files": ["SymbolIsBannedAnalyzer.cs", "DoNotUseInsecureDtdProcessing.cs", "DoNotUseInsecureDtdProcessingInApiDesign.cs", "DoNotUseInsecureXSLTScriptExecution.cs", "SecurityDiagnosticHelpers.cs", "DoNotUseInsecureXSLTScriptExecutionXslCompiledTransformLoadInsecureInputSettingsTests.cs", "PropertySetAnalysisTests.cs", "IOperationExtensions.cs", "ISymbolExtensions.cs", "SyntaxNodeExtensions.cs"], "prev_hash": null, "repo_url": "https://github.com/dotnet/roslyn-analyzers", "repo_name": "dotnet/roslyn-analyzers", "issue_id": "2576", "instance_id": "dotnet_roslyn-analyzers__2576__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.dotnet_roslyn-analyzers__2576__9.0:msbench-0.0.3", "problem_statement": "#### Analyzer package\r\n\r\nMicrosoft.CodeAnalysis.FxCopAnalyzers\r\n\r\n#### Package Version\r\n\r\nv2.9.3 (Latest)\r\n\r\n#### Diagnostic ID\r\n\r\nN/A\r\n\r\n#### Repro steps\r\n\r\n1. Setup Winforms project\r\n2. Install Microsoft.CodeAnalysis.FxCopAnalyzers\r\n3. Build solution\r\n\r\n#### Expected behavior\r\nBuild should be fast\r\n\r\n#### Actual behavior\r\nBuild is very slow\r\n\r\n#### Additional context:\r\nI went to the Microsoft Build conference in May and spoke with several developers about this (at the Winforms booth and the Visual Studio booth) and the recommendation was to submit an issue here. I was originally using the \"stopwatch\" approach to time the builds, but I've since come across an extension called BuildVision which measures each project's elapsed build time.\r\n\r\nMy solution layout:\r\n![image](https://user-images.githubusercontent.com/5721295/59389173-4b702500-8d33-11e9-9ae3-88e23a2855d0.png)\r\n\r\nWith Microsoft.CodeAnalysis.FxCopAnalyzers installed, after clean and building solution, here is output from BuildVision (note Winforms build time of nearly **_1 minute_**):\r\n![image](https://user-images.githubusercontent.com/5721295/59389236-778ba600-8d33-11e9-9767-f3bd6794887e.png)\r\n\r\nAfter removing FxCopAnalyzers (and all dependent analyzers such as VersionCheck, CodeQuality, NetCore, NetFramework), clean and build solution, here is output from BuildVision (note Winforms build time of **_6 seconds_**):\r\n![image](https://user-images.githubusercontent.com/5721295/59389387-c9ccc700-8d33-11e9-9578-27238db0ed5c.png)\r\n\r\nThe above was run on a Winforms project that has been around for about a year now on .NET Framework 4.7.2. I also tried the same on a brand new Winforms project and the build time went from 2 seconds (without FxCopAnalyzers) to 15 seconds (with the analyzers)\r\n\r\nLet me know if I can provide any additional information.\r\n"}
{"hash": "bee83eef1b4661edf549beea9abfc85f305f2bd3", "message": "Store the global flow values per operation as a post-step\n\nFixes #4182\nVerified that the added unit test causes an infinite loop in flow analysis prior to this fix.\n\nAnalyzers executing global flow analysis need the global flow state values at each operation in the flow graph. Currently, we store these global values into the operation state map while performing analysis, but this seems to lead to incorrect analysis results. As these global analysis values per operation are not required by the flow analysis itself,, we now store these values in separate global value map during analysis. These values will be stored onto the final result after analysis, so the analyzers will see only global flow state values in the result.", "cs_files": ["PlatformCompatibilityAnalyzer.OperationVisitor.cs", "PlatformCompatibilityAnalyzerTests.GuardedCallsTests.cs", "GlobalFlowStateAnalysis.cs", "GlobalFlowStateDataFlowOperationVisitor.cs", "DataFlowAnalysisResult.cs"], "prev_hash": null, "repo_url": "https://github.com/dotnet/roslyn-analyzers", "repo_name": "dotnet/roslyn-analyzers", "issue_id": "4182", "instance_id": "dotnet_roslyn-analyzers__4182__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.dotnet_roslyn-analyzers__4182__9.0:msbench-0.0.3", "problem_statement": "### Analyzer\r\n\r\n**Diagnostic ID**: I think this is the PlatformCompatibilityAnalyzer but I'm not sure as the build never complete\r\n\r\n### Analyzer source\r\n\r\n**SDK**: [Built-in CA analyzers in .NET 5 SDK or later](https://docs.microsoft.com/dotnet/fundamentals/productivity/code-analysis)\r\n\r\n**Version**: 5.0.100-rc.1.20452.10\r\n\r\n### Describe the bug\r\n\r\nThe build never completes. It uses lots of CPU and the memory keeps increasing (> 2GB) when I add the `[SupportedOSPlatform]` attribute in the following code.\r\n\r\n![image](https://user-images.githubusercontent.com/509220/93718538-1e700c00-fb4b-11ea-9a19-985e2f21c6c5.png)\r\n\r\n### Steps To Reproduce\r\n\r\nCompile the following code using `dotnet build`:\r\n\r\n````csharp\r\n#nullable disable\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Diagnostics;\r\nusing System.Runtime.InteropServices;\r\nusing System.Runtime.Versioning;\r\n\r\nnamespace Repro\r\n{\r\n    public static partial class ProcessExtensions\r\n    {\r\n        public static int? GetParentProcessId(this Process process)\r\n        {\r\n            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))\r\n            {\r\n                foreach (var entry in GetProcesses())\r\n                {\r\n                }\r\n            }\r\n            else\r\n            {\r\n                string line = \"\";\r\n                while (true)\r\n                {\r\n                    if (line.StartsWith(\"\", StringComparison.Ordinal))\r\n                    {\r\n                        if (true)\r\n                        {\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        [SupportedOSPlatform(\"windows\")]\r\n        public static IEnumerable<int> GetProcesses() => throw null;\r\n    }\r\n}\r\n````\r\n\r\n````xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net5.0</TargetFramework>\r\n  </PropertyGroup>\r\n</Project>\r\n````\r\n\r\n### Expected behavior\r\n\r\nThe compilation should complete\r\n\r\n### Actual behavior\r\n\r\nThe compilation doesn't complete.\r\n\r\n- If you remove the `[SupportedOSPlatform(\"windows\")]`, the code compiles.\r\n- If you remove a statement from the method, it compiles.\r\n"}
{"hash": "7a51dbd0af9f5269b83aa569a9531a1153d39ca7", "message": "Fix the incorrect merge logic for back edges for GlobalFlowStateAnalysis\n\nFixes #6015\n\n`GlobalFlowStateAnalysisValueSet.Unset` is used to represent unanalyzed flow state, `GlobalFlowStateAnalysisValueSet.Empty` is used to represent analyzed flow state with no analysis values. We initialize the flow states for the entry basic block of the CFG with `Unset` value, but never replace the `Unset` with `Empty` for subsequent passes. This in turn leads to incorrect merge when a `Known` value flows from the back edge to the loop start and ends up overriding the `Unset` value instead of being overridden by the `Empty` value. Now we correctly perform this merge logic.\n\nI verified that prior to this fix, the added unit test hang due to this issue. I also verified that building the github repo cited in the feedback ticket with platform compat analyzer also leads to a hang before this fix. Both these repros are fixed after this PR.", "cs_files": ["PlatformCompatibilityAnalyzerTests.cs", "GlobalFlowStateAnalysis.GlobalFlowStateAnalysisValueSetDomain.cs", "GlobalFlowStateValueSetFlowOperationVisitor.cs"], "prev_hash": null, "repo_url": "https://github.com/dotnet/roslyn-analyzers", "repo_name": "dotnet/roslyn-analyzers", "issue_id": "6015", "instance_id": "dotnet_roslyn-analyzers__6015__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.dotnet_roslyn-analyzers__6015__9.0:msbench-0.0.3", "problem_statement": "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Compiling-net-6-project-with-analysis-e/10035003)._\n\n---\n[severity:It's more difficult to complete my work] [regression] [worked-in:2019]\r\nIf i enable the Code Analysis on build the process never completes, VBCSCompiler process consumes an enormous amount of memory (I've seen 25+ gig) and cpu.  I've left it to run over night, but it has failed.\n\n---\n### Original Comments\n\n#### Feedback Bot on 10/5/2022, 06:58 AM: \n\n(private comment, text removed)\n#### Sam Harwell [MSFT] on 10/5/2022, 08:57 PM: \n\n(private comment, text removed)\n#### Feedback Bot on 18/5/2022, 02:10 PM: \n\n(private comment, text removed)\n#### Steve Sharp on 19/5/2022, 02:08 PM: \n\n(private comment, text removed)\n#### Sam Harwell [MSFT] on 19/5/2022, 07:37 PM: \n\n(private comment, text removed)\n#### Steve Sharp on 19/5/2022, 07:40 PM: \n\n(private comment, text removed)\n#### Steve Sharp on 19/5/2022, 07:46 PM: \n\n(private comment, text removed)\n#### Feedback Bot on 26/5/2022, 09:50 PM: \n\n(private comment, text removed)\n#### Feedback Bot on 2/6/2022, 09:39 AM: \n\n(private comment, text removed)\n#### Feedback Bot on 2/6/2022, 09:39 AM: \n\n(private comment, text removed)\n\n---\n### Original Solutions\n(no solutions)"}
{"hash": "d9e2b5c5c963d053681c925e83b28fdb60177641", "message": "Improve Sequence<T> performance\n\nAlso clear Memory<T> when AdvanceTo is called to allow GC to release memory for ref types.\n\nFixes #53", "cs_files": ["SequenceTests.cs", "Sequence`1.cs"], "prev_hash": "a9b91aeaafc3b67238673768297dbc1161681d31", "repo_url": "https://github.com/dotnet/Nerdbank.Streams", "repo_name": "dotnet/Nerdbank.Streams", "issue_id": "53", "instance_id": "dotnet_nerdbank.streams__53__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.dotnet_nerdbank.streams__53__9.0:msbench-0.0.3", "problem_statement": "* [ ] Convert Memory to Span before Slicing where possible (e.g. `GetSpan`'s call to `TrailingSlack` which slices Memory)\r\n* [ ] Fewer calculations and slices all around: store Memory in a field for frequent calls like GetSpan and GetMemory"}
{"hash": "a2b09a5fa8d0691b2878fdfe257d1b807b3c939c", "message": "Add support for ArrayPool<T> to Sequence<T>\n\nThis is the new default.\nIt reduces GC pressure since renting arrays no longer incurs an IMemoryOwner<T> allocation.\nIt also improves performance significantly: 14-32%\n\nCloses #51", "cs_files": ["Sequence`1.cs"], "prev_hash": "9cfda7b8392dee5f2cf5ef2d36aab1efbf305a91", "repo_url": "https://github.com/dotnet/Nerdbank.Streams", "repo_name": "dotnet/Nerdbank.Streams", "issue_id": "51", "instance_id": "dotnet_nerdbank.streams__51__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.dotnet_nerdbank.streams__51__9.0:msbench-0.0.3", "problem_statement": "`MemoryPool<T>` incurs an allocation for [every single rental](https://github.com/dotnet/corefx/blob/3685052201c95462f210582be9fe380baf1b902e/src/System.Memory/src/System/Buffers/ArrayMemoryPool.cs#L22), even for recycled arrays. We don't need to pay that tax. We can use `ArrayPool<T>` directly, which is alloc-free for recycled arrays."}
{"hash": "caee1d18457ca723f591f990783b8ffd00170987", "message": "Clear references to ref type T when recycling memory in Sequence<T>\n\nFixes #61", "cs_files": ["SequenceTests.cs", "Sequence`1.cs"], "prev_hash": "18a5889a47d471d38479139f3535053cd693e3f7", "repo_url": "https://github.com/dotnet/Nerdbank.Streams", "repo_name": "dotnet/Nerdbank.Streams", "issue_id": "61", "instance_id": "dotnet_nerdbank.streams__61__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.dotnet_nerdbank.streams__61__9.0:msbench-0.0.3", "problem_statement": "When a `Sequence<T>` is initialized with many reference type `T` instances, and then the `Sequence<T>` is disposed or `Reset()` is called, the underlying arrays are recycled into a pool without first clearing them. This results in a (bounded?) memory leak because all those references will never be candidates for GC (till the arrays get reset in some other way).\r\n\r\nWe should clear arrays before recycling them, at least if they contain reference types."}
{"hash": "62f0feb6d9a77149356ce0b1de3762db5df470e2", "message": "Add ChannelOptions.ExistingPipe\n\nThis allows for Channels to be created to read and write directly to an existing PipeReader/PipeWriter pair. High performance scenarios that already have this pair can use this to avoid copying all channel communication through an intermediary Pipe.\n\nCloses #68", "cs_files": ["MultiplexingStreamChannelOptionsTests.cs", "MultiplexingStreamTests.cs", "MultiplexingStream.Channel.cs", "MultiplexingStream.ChannelOptions.cs", "MultiplexingStream.cs", "PipeExtensions.cs", "Strings.Designer.cs"], "prev_hash": "eddf2703a5a5f74ab94dbd68299c8916324babc1", "repo_url": "https://github.com/dotnet/Nerdbank.Streams", "repo_name": "dotnet/Nerdbank.Streams", "issue_id": "68", "instance_id": "dotnet_nerdbank.streams__68__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.dotnet_nerdbank.streams__68__9.0:msbench-0.0.3", "problem_statement": "Instead of *always* instantiating a new `Pipe()` instance for reading and another for writing in the `Channel` constructor, add `ChannelOptions` properties for the caller to pass in the `PipeWriter` and `PipeReader` to use. This can eliminate a link in a pipe-chain and thus all the memory copies that that entails."}
{"hash": "facc306d665f19c5bd49a01e0bd9df580c9013d9", "message": "Do not allocate from pool when MinimumSpanLength is defined...\n\nand there is space left in the current allocation. This is a fix for #532", "cs_files": ["MockMemoryPool`1.cs", "SequenceTests.cs", "Sequence`1.cs"], "prev_hash": "1b36ab3bbe7229313be741f836f2060824da8616", "repo_url": "https://github.com/dotnet/Nerdbank.Streams", "repo_name": "dotnet/Nerdbank.Streams", "issue_id": "532", "instance_id": "dotnet_nerdbank.streams__532__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.dotnet_nerdbank.streams__532__9.0:msbench-0.0.3", "problem_statement": "The current implementation in Sequence does not return the remaining space in the current buffer allocation when MinimumSpanLength is specified.\r\n\r\nAccording to the documentation of `MinimumSpanLength`:\r\n\r\n```\r\n/// Each time <see cref=\"GetSpan(int)\"/> or <see cref=\"GetMemory(int)\"/> is called,\r\n/// previously allocated memory is used if it is large enough to satisfy the length demand.\r\n```\r\n\r\nThis is however not what currently happens. Instead new memory is allocated for every call to GetSpan and GetMemory().\r\n\r\nPR incoming."}
{"hash": "5dee030ffa85a9d1d8de9e4d07164273b057255f", "message": "Add font typeface cache\n\nUpdate FontStyle to add a typeface cache to avoid to call too often the font face lookup table.\n\nThis should solve issue #2833", "cs_files": ["SkiaSharpExtensions.cs", "FontStyle.cs"], "prev_hash": "c18b0f02af889b5fb04510d960d947493d2eb619", "repo_url": "https://github.com/ScottPlot/ScottPlot", "repo_name": "ScottPlot/ScottPlot", "issue_id": "2833", "instance_id": "scottplot_scottplot__2833__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.scottplot_scottplot__2833__9.0:msbench-0.0.3", "problem_statement": "## Bug Report\r\n\r\n**Issue:** \r\nVery poor performance, only 10-20FPS\r\nReferring to #2419 could solve the performance issue, but I am not sure about the problems encountered on .NET Framework, so it was not ultimately resolved.\r\n\r\n#2419 method:\r\nModify source code \r\nPath: `ScottPlot-main\\src\\ScottPlot5\\ScottPlot5\\Extensions\\SkiaSharpExtensions.cs`\r\nAdd a static SKTypeface to avoid searching for SKTypeface every time rendering occurs.\r\nFinally build the .dll\r\n\r\n```cs\r\n    //Add\r\n    private static SKTypeface? _typeface = null;\r\n\r\n    public static void ApplyToPaint(this FontStyle fontStyle, SKPaint paint)\r\n    {\r\n        SKFontStyleWeight weight = fontStyle.Bold ? SKFontStyleWeight.Bold : SKFontStyleWeight.Normal;\r\n        SKFontStyleSlant slant = fontStyle.Italic ? SKFontStyleSlant.Italic : SKFontStyleSlant.Upright;\r\n        SKFontStyleWidth width = SKFontStyleWidth.Normal;\r\n        SKFontStyle skfs = new(weight, width, slant);\r\n\r\n        //SKTypeface typeface = SKTypeface.FromFamilyName(fontStyle.Name, skfs);\r\n\r\n        //Add choose one of the two, they are the same\r\n        SKTypeface typeface = _typeface ?? (_typeface = SKTypeface.FromFamilyName(fontStyle.Name, skfs));\r\n        //SKTypeface typeface = (_typeface == null) ? _typeface = SKTypeface.FromFamilyName(fontStyle.Name, skfs) : _typeface;\r\n\r\n\r\n        paint.Typeface = typeface;\r\n        paint.TextSize = fontStyle.Size;\r\n        paint.Color = fontStyle.Color.ToSKColor();\r\n        paint.IsAntialias = fontStyle.AntiAlias;\r\n    }\r\n```\r\n\r\nLow performance picture:\r\n<img width=\"600\" alt=\"\u87a2\u5e55\u64f7\u53d6\u756b\u9762 2023-08-04 095502\" src=\"https://github.com/ScottPlot/ScottPlot/assets/35124424/e94bb86b-6858-49b8-840b-4ac9e5f18e32\">\r\n\r\n\r\n\r\n**Reproducing:** \r\na code sample\r\nXaml:\r\n```Xaml\r\n<ScottPlot:AvaPlot Name=\"AvaPlot1\" />\r\n\r\n```\r\nC#:\r\n```cs\r\n   double[] dataX = { 1, 2, 3, 4, 5 };\r\n   double[] dataY = { 1, 4, 9, 16, 25 };\r\n\r\n   AvaPlot avaPlot1 = this.Find<AvaPlot>(\"AvaPlot1\");\r\n   avaPlot1.Plot.Add.Scatter(dataX, dataY);\r\n   avaPlot1.Refresh();\r\n```\r\n\r\n### System Details\r\n* **ScottPlot Version:** 5.0.6 beta\r\n* **Operating System:** Ubuntu20.04\u3001Ubuntu22.04\u3001WSL\r\n* **Application Type:** Avalonia11.0.2\r\n* **.NET Version:**  .NET 6.0\u3001.NET 7.0"}
{"hash": "b34722811405dd4d528c3a126a8dddff5f828ad6", "message": "Related to #545, cleaning up saga instance usage to avoid deadlock in InMemorySagaRepository\n\n\nFormer-commit-id: 918fe0478da79891e84a402fabfe5ff407f2b8bc", "cs_files": ["InMemoryDeadlock_Specs.cs", "InMemorySagaRepository.cs", "IndexedSagaDictionary.cs", "IndexedSagaProperty.cs"], "prev_hash": "1b5b9e47332598577087dab4b468361abc051d9f", "repo_url": "https://github.com/MassTransit/MassTransit", "repo_name": "MassTransit/MassTransit", "issue_id": "545", "instance_id": "masstransit_masstransit__545__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.masstransit_masstransit__545__9.0:msbench-0.0.3", "problem_statement": "InMemorySagaRepository.cs\n\nScenario causing deadlock:\n\n  Message sent to saga repository (a calculation timeout for example)\n    Sagas collection locked\n    Existing saga retrieved\n    Sagas collection released\n    Message routed to saga\n    At this point the saga is marked as in use \n    Saga completes\n  Before the remove callback can complete executing in the repo, another message comes in for that saga (the original calculation that missed the timeout window)\n    Sagas collection is locked\n    Tries to acquire lock on the existing saga (that has yet to be removed)\n    Can't acquire it because the previous message still has the lock\n  The Remove callback is trying to acquire the sagas lock but can't because of the above\n"}
{"hash": "4ea729582433a936bfaca5e4e613d290b32327ce", "message": "Fixed #1055, rescue filter causing death of 1,000 cpus", "cs_files": ["ErrorQueue_Specs.cs"], "prev_hash": "4e4478c0717aec243ca1385313089e744e5502e1", "repo_url": "https://github.com/MassTransit/MassTransit", "repo_name": "MassTransit/MassTransit", "issue_id": "1055", "instance_id": "masstransit_masstransit__1055__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.masstransit_masstransit__1055__9.0:msbench-0.0.3", "problem_statement": "### Is this a bug report?\r\nYes \r\n\r\n### Can you also reproduce the problem with the lastest version?\r\nYes all dev and 4.0.0.0 release\r\n\r\n### Environment\r\n\r\n1. Operating system: WIndows 10\r\n2. Visual Studio version: VS 2017\r\n3. Dotnet version: 4.5.2-4.6.2\r\n\r\n### Steps to Reproduce\r\n\r\npublic async Task Consume(ConsumeContext<AnyMessage> context)\r\n{\r\n//Will leave message at Unacked and keep calling this consume\r\n  throw new AggregateException();\r\n}\r\n\r\n### Expected Behavior\r\n\r\nShould apply middleware and by default move mesage to _error queue\r\n\r\n### Actual Behavior\r\n\r\nmessage left as Unacked and Consumer is falling to infinite loop\r\n\r\n### Reproducible Demo\r\nSimpliest ever reproduction:\r\nhttps://github.com/zagyar/MassTransitAggregateExceptionConsumerBug\r\n\r\nOld issues:\r\nmost likely same issue MassTransit/MassTransit#930\r\n\r\n"}
{"hash": "8510037e81bc025ea087a5a96091e95d3b345809", "message": "Fixed #1960 - Using ChannelExecutor for in-memory transport to avoid deadlocks", "cs_files": ["IInMemoryQueue.cs", "IMessageFabric.cs", "InMemoryQueue.cs", "MessageFabric.cs", "InMemoryTransportProvider.cs", "ChannelExecutor.cs", "Batch_Specs.cs", "Batch_Specs.cs"], "prev_hash": "c5835825d11efe5f2f70d99edf7512151b316afa", "repo_url": "https://github.com/MassTransit/MassTransit", "repo_name": "MassTransit/MassTransit", "issue_id": "1960", "instance_id": "masstransit_masstransit__1960__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.masstransit_masstransit__1960__9.0:msbench-0.0.3", "problem_statement": "### Is this a bug report?\r\n\r\nYes\r\n\r\n### Can you also reproduce the problem with the latest version?\r\n\r\nYes.\r\n\r\n### Environment\r\n\r\n1. Operating system: \r\n2. Visual Studio version: \r\n3. Dotnet version: netcoreapp3.1\r\n\r\n### Steps to Reproduce\r\n\r\n1. git clone https://github.com/vadimart92/mt_inmemory_deadlock\r\n2. cd mt_inmemory_deadlock\r\n3. dotnet run\r\n\r\n### Expected Behavior\r\n\r\nClass MyConsumer should process all 5 messages one-by-one. Program must exit.\r\n\r\n### Actual Behavior\r\n\r\nOnly 1st message consumed. And deadlock occurred.\r\nProgram stuck.\r\n\r\nI think it's because of continuations of async state machine run in same task scheduler (LimitedConcurrencyLevelTaskScheduler) as main consuming task.\r\n\r\n### Reproducible Demo\r\n\r\nhttps://github.com/vadimart92/mt_inmemory_deadlock"}
{"hash": "14da7c8f5861e9581b029c1ad47646d30d22fa4d", "message": "Fixed issue #397 - reconnecting with bad connection hangs subsequent publishes\n\n\nFormer-commit-id: a91bae86e2647b4fd678ecdc4d23bab79bda7a80", "cs_files": ["RabbitMqTestFixture.cs", "Reconnecting_Specs.cs", "RabbitMqConnectionCache.cs", "RabbitMqModelCache.cs", "MultiTestConsumer.cs"], "prev_hash": "f83d5b0e136323ccdf85fdac856a16a6e4668baf", "repo_url": "https://github.com/MassTransit/MassTransit", "repo_name": "MassTransit/MassTransit", "issue_id": "397", "instance_id": "masstransit_masstransit__397__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.masstransit_masstransit__397__9.0:msbench-0.0.3", "problem_statement": "# The issue\n\nI'm having a problem with the latest version of masstransit while publishing to the queue and starting/stopping the RabbitMQ service.\n\nSo, if I start the bus and, before I send any message to the queue, stop the rabbitmq service and try to publish the first message it will fail (of course, the service is down). Then, I will start the service again and try to publish again and I will get a deadlock. \n\nI created a unit testing to reproduce this behavior, but I think you will need to run visual studio as administrator to be able to start and stop the service.\n## Unit test\n\n``` CSharp\n[Test]\npublic async Task Should_not_block_when_rabbitmqservices_goes_down()\n{\n    var rabbitMqService = new ServiceController(\"RabbitMQ\");\n    if(rabbitMqService.Status != ServiceControllerStatus.Running)\n    {\n        rabbitMqService.Start();\n    }\n\n    var busControl = Bus.Factory.CreateUsingRabbitMq(x =>\n    {\n        x.Host(new Uri(\"rabbitmq://localhost/\"), h =>\n        {\n            h.Username(\"guest\");\n            h.Password(\"guest\");\n        });\n    });\n\n    busControl.Start();\n    rabbitMqService.Stop();\n\n    int index = 0;\n    while (index < 3)\n    {\n        Debug.WriteLine(\"Go for the {0} round...\", index + 1);\n        try\n        {\n            //await busControl.Publish<object>(new { Id = 1, Name = \"Abc\" });\n            Debug.WriteLine(\"Publishing\");\n            TaskUtil.Await(() => busControl.Publish<object>(new { Id = 1, Name = \"Abc\" }));\n        }\n        catch (Exception)\n        {\n            Debug.WriteLine(\"Error, starting the rabbitmq again...\");\n            rabbitMqService.Start();\n        }\n\n        index++;\n    }\n\n    Assert.IsTrue(true);\n}\n```\n\n```\nawait busControl.Publish<object>(new { Id = 1, Name = \"Abc\" });\n```\n\nThis code is commented but I did try with it also with the same result.\n### Log\n\n```\nGo for the 1 round...\n2015-11-19 17:33:13,560 [AMQP Connection amqp://localhost:5672] DEBUG MassTransit.RabbitMqTransport.Pipeline.RabbitMqBasicConsumer - Consumer Model Shutdown (amq.ctag-Q4Lafwjtvmyv8hKmYAsc1g), Concurrent Peak: 0, 320-CONNECTION_FORCED - broker forced connection closure with reason 'shutdown'\n2015-11-19 17:33:13,561 [AMQP Connection amqp://localhost:5672] DEBUG MassTransit.RabbitMqTransport.Pipeline.RabbitMqConsumerFilter - Consumer amq.ctag-Q4Lafwjtvmyv8hKmYAsc1g: 0 received, 0 concurrent\n2015-11-19 17:33:13,564 [AMQP Connection amqp://localhost:5672] DEBUG MassTransit.RabbitMqTransport.Integration.RabbitMqConnectionCache - Connecting: guest@localhost:5672/\n2015-11-19 17:33:15,570 [AMQP Connection amqp://localhost:5672] DEBUG MassTransit.RabbitMqTransport.Integration.RabbitMqConnectionCache - The connection usage threw an exception\nRabbitMQ.Client.Exceptions.BrokerUnreachableException: None of the specified endpoints were reachable ---> RabbitMQ.Client.Exceptions.ConnectFailureException: Connection failed ---> System.Net.Sockets.SocketException: No connection could be made because the target machine actively refused it 127.0.0.1:5672\n   at System.Net.Sockets.Socket.EndConnect(IAsyncResult asyncResult)\n   at System.Net.Sockets.TcpClient.EndConnect(IAsyncResult asyncResult)\n   at RabbitMQ.Client.Impl.SocketFrameHandler.Connect(TcpClient socket, AmqpTcpEndpoint endpoint, Int32 timeout)\n   --- End of inner exception stack trace ---\n   at RabbitMQ.Client.Impl.SocketFrameHandler.Connect(TcpClient socket, AmqpTcpEndpoint endpoint, Int32 timeout)\n   at RabbitMQ.Client.Impl.SocketFrameHandler..ctor(AmqpTcpEndpoint endpoint, Func`2 socketFactory, Int32 timeout)\n   at RabbitMQ.Client.Framing.Impl.ProtocolBase.CreateFrameHandler(AmqpTcpEndpoint endpoint, Func`2 socketFactory, Int32 timeout)\n   at RabbitMQ.Client.ConnectionFactory.CreateFrameHandler()\n   at RabbitMQ.Client.ConnectionFactory.CreateConnection()\n   --- End of inner exception stack trace ---\n   at RabbitMQ.Client.ConnectionFactory.CreateConnection()\n   at MassTransit.RabbitMqTransport.Integration.RabbitMqConnectionCache.<SendUsingNewConnection>d__13.MoveNext() in C:\\Users\\bruno.costa\\Documents\\GitHub\\MassTransit\\src\\MassTransit.RabbitMqTransport\\Integration\\RabbitMqConnectionCache.cs:line 94\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\n   at MassTransit.RabbitMqTransport.Integration.RabbitMqConnectionCache.ConnectionScope.<Attach>d__5.MoveNext() in C:\\Users\\bruno.costa\\Documents\\GitHub\\MassTransit\\src\\MassTransit.RabbitMqTransport\\Integration\\RabbitMqConnectionCache.cs:line 213\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\n   at MassTransit.RabbitMqTransport.Integration.RabbitMqConnectionCache.<SendUsingExistingConnection>d__14.MoveNext() in C:\\Users\\bruno.costa\\Documents\\GitHub\\MassTransit\\src\\MassTransit.RabbitMqTransport\\Integration\\RabbitMqConnectionCache.cs:line 159\nError, starting the rabbitmq again...\nGo for the 2 round...\n2015-11-19 17:33:15,582 [AMQP Connection amqp://localhost:5672] ERROR MassTransit.RabbitMqTransport.RabbitMqReceiveTransport - RabbitMQ connection failed: Connect failed: guest@localhost:5672/\n2015-11-19 17:33:15,583 [AMQP Connection amqp://localhost:5672] DEBUG MassTransit.RabbitMqTransport.Integration.RabbitMqConnectionCache - Connecting: guest@localhost:5672/\n2015-11-19 17:33:17,583 [AMQP Connection amqp://localhost:5672] ERROR MassTransit.RabbitMqTransport.RabbitMqReceiveTransport - RabbitMQ connection failed: Connect failed: guest@localhost:5672/\n2015-11-19 17:33:17,583 [AMQP Connection amqp://localhost:5672] DEBUG MassTransit.RabbitMqTransport.Integration.RabbitMqConnectionCache - Connecting: guest@localhost:5672/\n2015-11-19 17:33:18,086 [AMQP Connection amqp://localhost:5672] DEBUG MassTransit.RabbitMqTransport.Integration.RabbitMqConnectionCache - Connected: guest@localhost:5672/ (address: [::1]:5672, local: [::1]:58007\n2015-11-19 17:33:18,086 [AMQP Connection amqp://localhost:5672] DEBUG MassTransit.RabbitMqTransport.Integration.RabbitMqConnectionCache - Using new connection: guest@localhost:5672/\n2015-11-19 17:33:18,086 [AMQP Connection amqp://localhost:5672] DEBUG MassTransit.RabbitMqTransport.Pipeline.RabbitMqBasicConsumer - Consumer Model Shutdown (amq.ctag-Q4Lafwjtvmyv8hKmYAsc1g), Concurrent Peak: 0, 320-CONNECTION_FORCED - broker forced connection closure with reason 'shutdown'\n2015-11-19 17:33:18,088 [9] DEBUG MassTransit.RabbitMqTransport.Pipeline.PrepareReceiveQueueFilter - Queue: bus-FFPTN006-TE.ProcessHost.Managed-bmeyyygqwgsx4jn6bdjxnbhync (auto-delete)\n2015-11-19 17:33:18,090 [10] DEBUG MassTransit.RabbitMqTransport.Pipeline.RabbitMqBasicConsumer - ConsumerOk: rabbitmq://localhost:5672/bus-FFPTN006-TE.ProcessHost.Managed-bmeyyygqwgsx4jn6bdjxnbhync?durable=false&autodelete=true&prefetch=16 - amq.ctag-CeyDSRWhPfFWwxMaQv8fiQ\n```\n"}
{"hash": "8f5107dee54ac89167123050ca96b1f0e78241ef", "message": "Fixed #551 hang on startup of bus when failed to connect\n\n\nFormer-commit-id: 4af05ec0f8d4095c6ceb039eed485cef61768a10", "cs_files": ["ClearRequestActivity.cs", "PublishActivity.cs", "RequestActivity.cs", "RespondActivity.cs", "ScheduleActivity.cs", "UnscheduleActivity.cs", "MessageSessionSagaRepository.cs", "ServiceBusSendTransport.cs", "SendToPublishExchange_Specs.cs", "TwoActivityCourier_Specs.cs", "RabbitMqConnectionContext.cs", "RabbitMqExtensions.cs", "RabbitMqSendTransport.cs", "PerformanceCounter_Specs.cs", "MassTransitBus.cs", "NHibernateSagaRepository.cs", "SolutionVersion.cs"], "prev_hash": "0f02aa8aefed80cb2e1d0b6d032b0ce3acf48798", "repo_url": "https://github.com/MassTransit/MassTransit", "repo_name": "MassTransit/MassTransit", "issue_id": "551", "instance_id": "masstransit_masstransit__551__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.masstransit_masstransit__551__9.0:msbench-0.0.3", "problem_statement": "When starting the bus and the RabbitMQ service is stopped, the method will never return. There should be some sort of timeout and an exception, when it is not possible to connect to the service. The current behaviour causes the host application to hang, instead of failing greacefully. \n"}
{"hash": "e7a0d12d268077aef765d333709bf6f989dcfaa2", "message": "Fixed #4037 - Limit delay when using SQS to 15 minutes.", "cs_files": ["QueueSendTransportContext.cs"], "prev_hash": "0be349e6dc34ef8b9f92fe94f4fd1f416bfa6279", "repo_url": "https://github.com/MassTransit/MassTransit", "repo_name": "MassTransit/MassTransit", "issue_id": "4037", "instance_id": "masstransit_masstransit__4037__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.masstransit_masstransit__4037__9.0:msbench-0.0.3", "problem_statement": "### Contact Details\n\n_No response_\n\n### Version\n\n7.x (no longer supported)\n\n### On which operating system(s) are you experiencing the issue?\n\nLinux\n\n### Using which broker(s) did you encounter the issue?\n\nAmazon SQS\n\n### What are the steps required to reproduce the issue?\n\n```bash\n1. Create a message queue consumer \r\n2. Specify a Delayed retry with a time of more than 15 minutes\r\n3. Ensure the method throws an error\r\n4. Mass Transit tries to post the message to the queue, but fails with S-FAULT\r\n5. Step 5 repeats.\r\n\r\nI *KNOW* this happens as a result of ad SQS shortcoming (15 minutes max delay time), but the non-recovery remains an issue.\n```\n\n\n### What is the expected behavior?\n\nEither:\r\n\r\n- Check for incompatible time lengths in retry and cap them (possibly impossible, if SQS and RabbitMQ, for example, differ)\r\n  - Maybe if you allow the specific queue to be specified when registering, too allow different validations to be performed? Not sure if it could be done programmatically from the setup? \r\n\r\nOR\r\n\r\n- Allow a maximum amount (configurable) of failure on a specific message redelivery attempts\r\n- Log the failure\r\n- Log should contain the specific result from the queue\r\n- Send the message to error or skipped queue (probably error, as the message did fail)\r\n\n\n### What actually happened?\n\nAn S-FAULT was logged every minute, until the queue was purged and the consumer restarted.\n\n### Related log output, including any exceptions\n\n_No response_\n\n### Link to repository that demonstrates/reproduces the issue\n\n_No response_"}
{"hash": "9d881759218df3992a945110a135b7e39be57587", "message": "Fixes #654, deadlock on cache usage\n\n\nFormer-commit-id: d98b29b11836bad0b5af71618d107bf984d2c9d1", "cs_files": ["SendEndpointCache.cs"], "prev_hash": "c809b4a8da13060582222d063edee8a0ee177bba", "repo_url": "https://github.com/MassTransit/MassTransit", "repo_name": "MassTransit/MassTransit", "issue_id": "654", "instance_id": "masstransit_masstransit__654__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.masstransit_masstransit__654__9.0:msbench-0.0.3", "problem_statement": "Using the LazyMemoryCache() with a limited concurrency hides the scheduler on `Get` which can cause subsequent concurrent tasks to deadlock.\n"}
{"hash": "6eea3942025c010c87d9d30e251ee97d08b6d3f3", "message": "Issue#5 testing with different amounts for memory issues", "cs_files": ["StaticTestRunner.cs", "DataCollectionFactory.cs"], "prev_hash": "65ab3a124e6e6550f02127ec561c9fb97a474479", "repo_url": "https://github.com/Marvin-Brouwer/FluentSerializer", "repo_name": "Marvin-Brouwer/FluentSerializer", "issue_id": "5", "instance_id": "marvin-brouwer_fluentserializer__5__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.marvin-brouwer_fluentserializer__5__9.0:msbench-0.0.3", "problem_statement": "This is necessary for every type of serializer.\r\nAt the moment of writing:\r\n\r\n- Json\r\n- Xml\r\n\r\nPerhaps it's possible to measure the difference between for example the Json serializer and a Json.Net Automapper combination but this is not mandatory. We're mostly concerned with this libraries performance.\r\n\r\nThese things are important:\r\n\r\n- Time of reflecting + building profile types\r\n- Time & Memory of Serializing\r\n- Time & Memory of deserializing\r\n\r\nMaybe serialize then deserialize and deserialize then serialize in a single profiling run?"}
{"hash": "c1c59e23fe4054e195cf171486fdd76ea8b8010d", "message": "Issue#13 changed builder to object and reduced allocations", "cs_files": ["ITextWriter.cs", "StringFast.cs", "JsonArray.cs", "JsonCommentMultiLine.cs", "JsonCommentSingleLine.cs", "JsonObject.cs", "JsonProperty.cs", "XmlAttribute.cs", "XmlCharacterData.cs", "XmlComment.cs", "XmlDocument.cs", "XmlElement.cs", "XmlFragment.cs", "XmlText.cs"], "prev_hash": "139710169746d17fe932b3d8fa8f57b55c3e93b3", "repo_url": "https://github.com/Marvin-Brouwer/FluentSerializer", "repo_name": "Marvin-Brouwer/FluentSerializer", "issue_id": "13", "instance_id": "marvin-brouwer_fluentserializer__13__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.marvin-brouwer_fluentserializer__13__9.0:msbench-0.0.3", "problem_statement": "The `StringBuilder` seems to allocate a lot of memory.\r\nperhaps using this old solution will help:   \r\nhttps://www.reddit.com/r/Unity3D/comments/3zz62z/alternative_to_stringbuilder_without_memory/  \r\nhttps://pastebin.com/HqAw2pTG  \r\n  \r\nOr maybe building up element components into a `Span<char>` and combining them with something like this:\r\n\r\n```cs\r\n            var builderSpan = new char[128].AsSpan();\r\n            int capacity = 0;\r\n\r\n            builderSpan[capacity] = '<';\r\n            capacity++;\r\n            //etc..\r\n\r\n            var valueSpan = new char[capacity].AsSpan();\r\n            builderSpan[0..capacity].CopyTo(valueSpan);\r\n\r\n            return valueSpan;\r\n```\r\n\r\nand combine them like \r\n\r\n```cs\r\n            Span<char> currentValueSpan = default;\r\n            Span<char> additionalValueSpan = default;\r\n\r\n            var combinedLength = currentValueSpan.Length + additionalValueSpan.Length;\r\n\r\n            var combinedValueSpan = new char[combinedLength].AsSpan();\r\n            currentValueSpan.CopyTo(combinedValueSpan);\r\n            additionalValueSpan.CopyTo(combinedValueSpan[currentValueSpan.Length..]);\r\n\r\n            return combinedValueSpan;\r\n```\r\n\r\nThe above example is obviously not how spans work, this is just a quick off the cuff example.\r\n\r\nA third option might be any of these libraries:\r\n\r\n- https://github.com/Cysharp/ZString\r\n\r\nIn the case someone picks this up, please provide a summary of the things you tried and their BenchMarks in this issues thread before applying for a PR.\r\n\r\nDependent on: #4 "}
{"hash": "9470e6b7a56df165e71de771591deb1ed7dabbd6", "message": "[#133] Changed benchmark to more accurate setup", "cs_files": ["StaticTestRunner.cs"], "prev_hash": "08c875e83163ae77a6f546ee9af5a1653ad2db7f", "repo_url": "https://github.com/Marvin-Brouwer/FluentSerializer", "repo_name": "Marvin-Brouwer/FluentSerializer", "issue_id": "133", "instance_id": "marvin-brouwer_fluentserializer__133__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.marvin-brouwer_fluentserializer__133__9.0:msbench-0.0.3", "problem_statement": "**Is your feature request related to a problem? Please describe.**\r\nIt appears that read-only arrays are performing better than lists.\r\nhttps://twitter.com/gsferreira/status/1516496643771797504/photo/1 \r\nhttps://devblogs.microsoft.com/dotnet/please-welcome-immutablearrayt/\r\n\r\nWe use lists everywhere, maybe it's worth having a look into that.\r\n\r\n**Describe the solution you'd like**\r\nApply, test, report \ud83d\ude1c\r\n\r\n**Describe alternatives you've considered**\r\n`-`\r\n\r\n**Additional context**\r\n`-`\r\n"}
{"hash": "c16d4f2ffc68b9050aeddbb8c4fea97f624a262f", "message": "Closes #292 Fix OutOfMemoryException when creating new HttpErrorInfo instance.", "cs_files": ["HttpErrorInfo.cs"], "prev_hash": "259c1f18dc948b8042b273213a5de097c067b9bc", "repo_url": "https://github.com/MarimerLLC/csla", "repo_name": "MarimerLLC/csla", "issue_id": "292", "instance_id": "marimerllc_csla__292__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.marimerllc_csla__292__9.0:msbench-0.0.3", "problem_statement": "There is a bug in the new 4.5.600 version of CSLA. If an exception of any type has occured while, for example, the DataPortal_Insert method (but I think the behavior may propagate to the others DataPortal_XXX methods as well) was running on the server side then it may end up with a System.OutOfMemoryException.\n\nThere is the HttpErrorInfo class (It is placed in the Source\\Csla\\Server\\Hosts\\HttpChannel\\HttpErrorInfo.cs) that has a constructor with one parameter taking in an object of Csla.WcfPortal.WcfErrorInfo type. That constructor also contains a While statement that turns into an endless loop if the WcfErrorInfo has its InnerError property set.\n"}
{"hash": "5419162db439b789df4fe812a702cac66da0230d", "message": "Fixes #1376\n* Avoid sync IO through asyn reading into a memory stream which will be used by the (de)serializer\n* Add integration test to verify that it works as expected", "cs_files": ["HttpTestServerFactory.cs", "TestDataPortalController.cs", "HttpPortalController.cs", "KestrelOrIISHostingTests.cs"], "prev_hash": "368b8a3ff81d5bc516e5b1756e4724146d22d15f", "repo_url": "https://github.com/MarimerLLC/csla", "repo_name": "MarimerLLC/csla", "issue_id": "1376", "instance_id": "marimerllc_csla__1376__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.marimerllc_csla__1376__9.0:msbench-0.0.3", "problem_statement": "A breaking change in ASP.NET Core 3 means that extra config is required if any dependent libraries use synchronous operations for IO or serialization. Right now `MobileFormatter` (more accurately its reader/writer pair) are synchronous.\r\n\r\nThese should be updated to be async to avoid the extra config, and to potentially improve throughput."}
{"hash": "a97a2bae4494360e79aff63a58624eeef9b415c9", "message": "#1459 Add data portal perf test project", "cs_files": ["PersonEdit.cs", "Program.cs", "RetrieveEntities.cs"], "prev_hash": "d242f15eccd65420fee3e16d909567fae6e015e6", "repo_url": "https://github.com/MarimerLLC/csla", "repo_name": "MarimerLLC/csla", "issue_id": "1459", "instance_id": "marimerllc_csla__1459__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.marimerllc_csla__1459__9.0:msbench-0.0.3", "problem_statement": "**Describe the bug**\r\nFetching a large (~10k) data set using CSLA 5.0.1 takes several seconds (5-6). Doing the same with version 4.11.2 takes less than one second (~200ms). For a minimal example see https://github.com/ka-fim/CSLA-Performance\r\n\r\n**Version and Platform**\r\nCSLA version: 5.0.1\r\nOS: Windows\r\nPlatform: .Net Framework 4.7.2"}
{"hash": "0d54cd9f9aeb69a0c070ef86ac4ae448c7230fa6", "message": "Fixed memory leak in skia renderer #197", "cs_files": ["MapRenderer.cs"], "prev_hash": "ac9054c5b06334e8e7f56dccf386cd393734cc6c", "repo_url": "https://github.com/Mapsui/Mapsui", "repo_name": "Mapsui/Mapsui", "issue_id": "197", "instance_id": "mapsui_mapsui__197__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.mapsui_mapsui__197__9.0:msbench-0.0.3", "problem_statement": "Hi!\r\n\r\nIn the following function:\r\nhttps://github.com/pauldendulk/Mapsui/blob/002480f7f1ef13473b9e3a1b5cc5fe1700d8b5ba/Mapsui.Rendering.Skia-PCL/MapRenderer.cs#L86\r\n\r\nWe have numberToKeep == _tileCache.Count * 3 and numberOfTilesUsedInCurrentIteration <= _tileCache.Count, which means that no matter what, the cache is going to keep expanding.\r\n\r\nUsing Mapsui in a WPF app, browsing around, we didn't notice much difference when hardcoding numberToKeep at 100, but without it, the memory usage could easily go up to OutOfMemory-esque dimensions when browing around."}
{"hash": "b8709750aa1bd496df9c2272073e3ab1b05febcc", "message": "Fixed bug where cache could have changed when manipulated on another thread, see #253", "cs_files": ["MapRenderer.cs"], "prev_hash": "5c1e0b6eff781dd0bebf3a080a2639f52d119121", "repo_url": "https://github.com/Mapsui/Mapsui", "repo_name": "Mapsui/Mapsui", "issue_id": "253", "instance_id": "mapsui_mapsui__253__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.mapsui_mapsui__253__9.0:msbench-0.0.3", "problem_statement": "Hello there!\r\n\r\nour software is using Mapsui to display a map, showing symbols (SymbolStyle -> png) on a separate layer. In the test setup we rotate the map clockwise by 1\u00b0 every 20 ms, but we don't want the symbols to appear rotated, so we rotate them anticlockwise.\r\nUnfortunatly the application becomes unresponsive after rotating the map for about 40 seconds. Some minutes later the whole gui and the map freezes completly.\r\n\r\nI was able to reproduce the issue on the SymbolsSample on the current master of Mapsui (downloaded 17th nov, 15:40) by introducing the following code in the constructor of Mapsui.Samples.Wpf\\Window1.xaml.cs:\r\n\r\n```\r\n          int deg = 0;\r\n            var thread = new Thread(() =>\r\n            {\r\n                while (true)\r\n                {\r\n                    MapControl.Map.RotateTo(deg);\r\n                    var layer = MapControl.Map.Layers.FirstOrDefault(x => x.Name == \"Styles Layer\") as MemoryLayer;\r\n                    if (layer != null)\r\n                    {\r\n                        var styles = ((MemoryProvider)layer.DataSource).Features.SelectMany(x => x.Styles);\r\n                        foreach (var style in styles)\r\n                        {\r\n                            var symbol = style as SymbolStyle;\r\n                            if (symbol != null)\r\n                            {\r\n                                symbol.SymbolRotation = -deg;\r\n                            }\r\n                        }\r\n                    }\r\n                    deg = deg++%360;\r\n\r\n                    Thread.Sleep(20);\r\n                }\r\n            });\r\n            thread.Start();\r\n```\r\n\r\nNote that in our actual application, we don't have to search for the correct SymbolStyles to rotate on each iteration, because we keep a reference to them. I just didn't want to introduce more changes to the sample code.\r\n\r\nRunning the CPU Analyzer tool, it appears that most of the cpu power sinks into PointRenderer.CreateSymbolFromBitmap(...)\r\n\r\nI attached 2 screenshots of the RAM Analyzer session which made me guess that there is a memory leak.\r\n\r\nIs the way we achieve the \"png symbol stays unrotated\" a wrong approach?\r\nI notice when we switch the render method of the MapControl to Skia the UI won't freeze anymore, but the png symbols won't stay unrotated - they slowly change the orientation without changing any other code. Skia and Wpf renderer behave differently there.\r\n\r\nI hope the information helps, please don't hesitate to ask for more.\r\n\r\n![mapsui diagsession 1](https://user-images.githubusercontent.com/18269443/33073637-cb456e46-cec3-11e7-9bc0-b758203dbbb2.png)\r\n![mapsui diagsession 2](https://user-images.githubusercontent.com/18269443/33073638-cb5d4da4-cec3-11e7-853f-25ede192bf1e.png)\r\n"}
{"hash": "97815b080dae34ce6c6781a082043f4103745fc1", "message": "Remove lock on cache because it caused hanges when using the RasterizingTileLayer #3010", "cs_files": ["VisibleFeatureIterator.cs"], "prev_hash": "ad464761c6ee1a9af97d68339e1eeecfb3223e8b", "repo_url": "https://github.com/Mapsui/Mapsui", "repo_name": "Mapsui/Mapsui", "issue_id": "3010", "instance_id": "mapsui_mapsui__3010__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.mapsui_mapsui__3010__9.0:msbench-0.0.3", "problem_statement": "**Mapsui Version**\n5.0.0-beta.16\n\n**Mapsui Platform**\nMaui\n\n**Device**\nAndroid (only device tested)\n\n**Describe the bug**\nWe have a map with a RasterizingTileLayer with thousands of polygons. When we run Maui 8 and Mapsui 4.1.9 the performance is awesome but when we update to Maui 9 and Mapsui 5.0.0-beta.16 the map starts to lag considerably. Every time you zoom or pan the UI thread seems to lock for the duration of the rendering. \n\n**To Reproduce**\nBasically add a RasterizingTileLayer with 100 000 polygons and compare the result. \n\nI tried to run the Performance sample with thousands of polygons in Mapsui 5 but it seems to hang. The sample in Mapsui 4 works.\n\n**Expected behavior**\nAt least the same performance as in Mapsui 4.\n\n**Additional context**\nWe upgraded our Blazor project to .Net 9 and Mapsui 5. Here we changed our RasterizingTileLayer to a TileLayer with a HTTP source and put the RasterizingTileSource server side. This works smoothly. So my guess is that something in Mapsui 5 has changed causing things to block the UI thread while rendering and/or creating the rasters.\n\nI could go back as far as 5.0.0-beta.12 and the performance issue is still present."}
{"hash": "38700c17921ef89913b9856070a76aaab9b38baf", "message": "Implement stateful, incremental skip\n\nThis is a perf optimization for streaming scenarios where a converter needs to skip a structure but the buffer may not have the entire structure in memory. This optimization records how much of the structure has been skipped already so that the reader can advance, freeing memory, and resume skipping when we get more bytes to decode.\n\nIn particular, this avoids the previous behavior that skipping had to be restarted from the beginning of the structure each time new bytes are brought in until the whole structure was in memory together.\n\nWhile this is theoretically a memory use improvement (for skipping scenarios only), this is mostly about avoiding CPU work to parse partial structures repeatedly until we get the whole thing in memory. With this change, at most one msgpack *token* (rather than whole structure) will be decoded more than once, and that limited to only once per fetch of new bytes.\n\nCloses #154", "cs_files": ["CustomConverters.cs", "ObjectMapConverter`1.cs", "ObjectMapWithNonDefaultCtorConverter`2.cs", "MessagePackAsyncReader.cs", "MessagePackReader.cs", "MessagePackStreamingReader.cs", "SerializationContext.cs", "MessagePackStreamingReaderTests.cs"], "prev_hash": "21382dcafbca44eff3ee9383ee89507c7c9477f8", "repo_url": "https://github.com/AArnott/Nerdbank.MessagePack", "repo_name": "AArnott/Nerdbank.MessagePack", "issue_id": "154", "instance_id": "aarnott_nerdbank.messagepack__154__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.aarnott_nerdbank.messagepack__154__9.0:msbench-0.0.3", "problem_statement": "Implement a stateful Skip method, such that we can efficiently test the buffer for how many structures it contains, and buffer more, then check how many structures it contains again, without repeating work for the part of the buffer we already had. This pattern of buffering till we get x structures is already being used by our built-in object converters as a perf optimization, so making the test part of the loop faster ought to improve overall performance."}
{"hash": "0a1f7f07e4b761db2fccf7df28a3650b44804fcf", "message": "Allow more effective trimming\n\nInstead of instantiating all built-in converters on startup unconditionally or referencing all the supported data types themselves, use a generic method so that the JIT will remove references to data types (and their converters) that are never serialized in the application.\n\nIt may not be intuitive, but indeed a long C# method of type checks _does_ offer this trim optimization, because the JIT / AOT compiler will remove type checks that will never match given the type argument on the generic method, thereby removing the unrelated type references, leaving only those behind that are actually going to be used.\n\nAccrues toward #190, by bringing the AOT console test app down from 3.9MB to just under 3.6MB.", "cs_files": ["PrimitiveConverterLookup.cs", "PrimitiveConverters.cs", "MessagePackSerializer.cs", "StandardVisitor.cs"], "prev_hash": "ed14d812eccb471e4962d0f0ac1bf9ee5826c3fe", "repo_url": "https://github.com/AArnott/Nerdbank.MessagePack", "repo_name": "AArnott/Nerdbank.MessagePack", "issue_id": "190", "instance_id": "aarnott_nerdbank.messagepack__190__9.0", "dotnet_version": "net9.0", "image_tag": "perfbench.eval.x86_64.aarnott_nerdbank.messagepack__190__9.0:msbench-0.0.3", "problem_statement": "The AotNativeConsole app project I recently added to the solution shows that as soon as MessagePackSerializer is used, the app .exe jumps from 1MB to 3.9MB. And it only serializes a tiny object, a List<T> and an int. Ouch.\r\n\r\nI removed nearly everything from this list to try to cut down on the size as an experiment, as @eiriktsarpalis  called out in https://github.com/AArnott/Nerdbank.MessagePack/pull/169#discussion_r1886438095:\r\n\r\nhttps://github.com/AArnott/Nerdbank.MessagePack/blob/ed14d812eccb471e4962d0f0ac1bf9ee5826c3fe/src/Nerdbank.MessagePack/StandardVisitor.cs#L24-L56\r\n\r\nThat dropped the 3.9MB exe down to 3.4MB. A nice improvement, but can we do more?"}
